{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nPusulaAI is an educational technology platform that bridges the gap between online learning content and real-world career opportunities. The application analyzes YouTube educational videos using Google's Gemini AI to extract topics and skills, then matches them with career paths and relevant courses from BTK Academy (Turkey's national IT education platform). The system generates personalized reports for both students and parents, providing actionable career guidance based on learning interests.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe frontend is built as a single-page application using React with TypeScript, featuring a modern component-based architecture:\n\n- **UI Framework**: React with Vite for fast development and building\n- **Styling**: Tailwind CSS with a comprehensive design system using shadcn/ui components\n- **State Management**: TanStack Query for server state and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Real-time Communication**: Custom WebSocket client for live progress updates during analysis\n\nThe application follows a clean component structure with reusable UI components, custom hooks for data fetching, and responsive design patterns.\n\n## Backend Architecture\n\nThe backend implements a Node.js/Express server with a service-oriented architecture:\n\n- **API Framework**: Express.js with TypeScript for type safety\n- **Database Layer**: Drizzle ORM with PostgreSQL (via Neon serverless)\n- **Service Layer**: Modular services for analysis, YouTube processing, AI integration, and BTK course matching\n- **Real-time Updates**: WebSocket integration for live progress tracking during analysis sessions\n\nKey architectural decisions include:\n- **Separation of Concerns**: Each major functionality (YouTube, AI analysis, career matching) is isolated in dedicated services\n- **Async Processing**: Long-running analysis tasks are handled asynchronously with WebSocket progress updates\n- **Database Schema**: Comprehensive schema supporting analysis sessions, progress tracking, career database, and course recommendations\n\n## External Dependencies\n\n### AI and Analysis Services\n- **Google Gemini AI**: Primary AI service for video transcript analysis and career matching using the @google/genai SDK\n- **YouTube Data API**: For video metadata extraction and transcript processing\n\n### Database and Infrastructure\n- **Neon PostgreSQL**: Serverless PostgreSQL database with connection pooling\n- **Drizzle ORM**: Type-safe database operations with schema management and migrations\n\n### Course Integration\n- **BTK Academy**: Integration with Turkey's national IT education platform for course recommendations (currently using mock data with plans for API integration)\n\n### Development and UI\n- **shadcn/ui**: Comprehensive component library built on Radix UI primitives\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **Radix UI**: Headless UI components for accessibility and functionality\n- **TanStack Query**: Server state management and caching\n- **Wouter**: Lightweight routing solution\n\nThe architecture prioritizes scalability, maintainability, and real-time user experience through its modular design and async processing capabilities.","size_bytes":3305},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertAnalysisSessionSchema } from \"@shared/schema\";\nimport { AnalysisService } from \"./services/analysis\";\nimport { WebSocketService } from \"./services/websocket\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // Initialize WebSocket service\n  const wsService = new WebSocketService(httpServer);\n  \n  // Initialize Analysis service with WebSocket\n  const analysisService = new AnalysisService(wsService);\n\n  // Start YouTube analysis\n  app.post(\"/api/analysis/start\", async (req, res) => {\n    try {\n      const validatedData = insertAnalysisSessionSchema.parse(req.body);\n      const sessionId = await analysisService.startAnalysis(validatedData.youtubeUrl);\n      \n      res.json({ \n        success: true, \n        sessionId,\n        message: \"Analiz başlatıldı\"\n      });\n    } catch (error: any) {\n      console.error(\"Analysis start error:\", error);\n      res.status(400).json({ \n        success: false, \n        message: error.message || \"Analiz başlatılamadı\"\n      });\n    }\n  });\n\n  // Get analysis status\n  app.get(\"/api/analysis/:sessionId/status\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const session = await analysisService.getAnalysisStatus(sessionId);\n      \n      if (!session) {\n        return res.status(404).json({\n          success: false,\n          message: \"Analiz oturumu bulunamadı\"\n        });\n      }\n\n      res.json({\n        success: true,\n        session: {\n          id: session.id,\n          youtubeUrl: session.youtubeUrl,\n          videoTitle: session.videoTitle,\n          status: session.status,\n          currentStep: session.currentStep,\n          createdAt: session.createdAt,\n          updatedAt: session.updatedAt,\n          completedAt: session.completedAt\n        }\n      });\n    } catch (error: any) {\n      console.error(\"Analysis status error:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Durum bilgisi alınamadı\"\n      });\n    }\n  });\n\n  // Get progress updates for a session\n  app.get(\"/api/analysis/:sessionId/progress\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const progress = await storage.getProgressUpdates(sessionId);\n      \n      res.json({\n        success: true,\n        progress\n      });\n    } catch (error: any) {\n      console.error(\"Progress fetch error:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"İlerleme bilgisi alınamadı\"\n      });\n    }\n  });\n\n  // Get complete analysis results\n  app.get(\"/api/analysis/:sessionId/results\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const session = await storage.getAnalysisSession(sessionId);\n      \n      if (!session) {\n        return res.status(404).json({\n          success: false,\n          message: \"Analiz oturumu bulunamadı\"\n        });\n      }\n\n      if (session.status !== \"completed\") {\n        return res.status(400).json({\n          success: false,\n          message: \"Analiz henüz tamamlanmadı\"\n        });\n      }\n\n      res.json({\n        success: true,\n        results: {\n          videoTitle: session.videoTitle,\n          geminiAnalysis: session.geminiAnalysis,\n          careerMatches: session.careerMatches,\n          btkRecommendations: session.btkRecommendations,\n          studentReport: session.studentReport,\n          parentReport: session.parentReport,\n          completedAt: session.completedAt\n        }\n      });\n    } catch (error: any) {\n      console.error(\"Results fetch error:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Sonuçlar alınamadı\"\n      });\n    }\n  });\n\n  // Get student report\n  app.get(\"/api/analysis/:sessionId/student-report\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const session = await storage.getAnalysisSession(sessionId);\n      \n      if (!session?.studentReport) {\n        return res.status(404).json({\n          success: false,\n          message: \"Öğrenci raporu bulunamadı\"\n        });\n      }\n\n      res.json({\n        success: true,\n        report: session.studentReport\n      });\n    } catch (error: any) {\n      console.error(\"Student report fetch error:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Öğrenci raporu alınamadı\"\n      });\n    }\n  });\n\n  // Get parent report\n  app.get(\"/api/analysis/:sessionId/parent-report\", async (req, res) => {\n    try {\n      const { sessionId } = req.params;\n      const session = await storage.getAnalysisSession(sessionId);\n      \n      if (!session?.parentReport) {\n        return res.status(404).json({\n          success: false,\n          message: \"Veli raporu bulunamadı\"\n        });\n      }\n\n      res.json({\n        success: true,\n        report: session.parentReport\n      });\n    } catch (error: any) {\n      console.error(\"Parent report fetch error:\", error);\n      res.status(500).json({\n        success: false,\n        message: \"Veli raporu alınamadı\"\n      });\n    }\n  });\n\n  // WebSocket info endpoint\n  app.get(\"/api/websocket/info\", (req, res) => {\n    res.json({\n      success: true,\n      connectedClients: wsService.getConnectedClientsCount(),\n      message: \"WebSocket servisi çalışıyor\"\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":5483},"server/storage.ts":{"content":"import { \n  users, analysisSessions, progressUpdates, careerDatabase, btkCourses,\n  type User, type InsertUser, type AnalysisSession, type InsertAnalysisSession,\n  type ProgressUpdate, type InsertProgressUpdate, type Career, type BTKCourse\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, like, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Analysis sessions\n  createAnalysisSession(session: InsertAnalysisSession): Promise<AnalysisSession>;\n  getAnalysisSession(id: string): Promise<AnalysisSession | undefined>;\n  updateAnalysisSession(id: string, updates: Partial<AnalysisSession>): Promise<AnalysisSession | undefined>;\n  \n  // Progress tracking\n  addProgressUpdate(sessionId: string, update: Omit<InsertProgressUpdate, 'sessionId'>): Promise<ProgressUpdate>;\n  getProgressUpdates(sessionId: string): Promise<ProgressUpdate[]>;\n  \n  // Career database\n  searchCareers(keywords: string[]): Promise<Career[]>;\n  getAllCareers(): Promise<Career[]>;\n  \n  // BTK courses\n  searchBTKCourses(keywords: string[]): Promise<BTKCourse[]>;\n  getBTKCoursesByCategory(category: string): Promise<BTKCourse[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async createAnalysisSession(session: InsertAnalysisSession): Promise<AnalysisSession> {\n    const [newSession] = await db\n      .insert(analysisSessions)\n      .values(session)\n      .returning();\n    return newSession;\n  }\n\n  async getAnalysisSession(id: string): Promise<AnalysisSession | undefined> {\n    const [session] = await db\n      .select()\n      .from(analysisSessions)\n      .where(eq(analysisSessions.id, id));\n    return session || undefined;\n  }\n\n  async updateAnalysisSession(id: string, updates: Partial<AnalysisSession>): Promise<AnalysisSession | undefined> {\n    const [updated] = await db\n      .update(analysisSessions)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(analysisSessions.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async addProgressUpdate(sessionId: string, update: Omit<InsertProgressUpdate, 'sessionId'>): Promise<ProgressUpdate> {\n    const [progressUpdate] = await db\n      .insert(progressUpdates)\n      .values({ ...update, sessionId })\n      .returning();\n    return progressUpdate;\n  }\n\n  async getProgressUpdates(sessionId: string): Promise<ProgressUpdate[]> {\n    return await db\n      .select()\n      .from(progressUpdates)\n      .where(eq(progressUpdates.sessionId, sessionId))\n      .orderBy(desc(progressUpdates.timestamp));\n  }\n\n  async searchCareers(keywords: string[]): Promise<Career[]> {\n    if (keywords.length === 0) return this.getAllCareers();\n    \n    return await db\n      .select()\n      .from(careerDatabase)\n      .where(\n        // Search in title, description, keywords, and skills\n        eq(careerDatabase.keywords, keywords) // This would need a more sophisticated search in production\n      );\n  }\n\n  async getAllCareers(): Promise<Career[]> {\n    return await db.select().from(careerDatabase);\n  }\n\n  async searchBTKCourses(keywords: string[]): Promise<BTKCourse[]> {\n    if (keywords.length === 0) return [];\n    \n    return await db\n      .select()\n      .from(btkCourses)\n      .where(eq(btkCourses.isActive, true));\n  }\n\n  async getBTKCoursesByCategory(category: string): Promise<BTKCourse[]> {\n    return await db\n      .select()\n      .from(btkCourses)\n      .where(eq(btkCourses.category, category));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":4192},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, jsonb, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const analysisSessions = pgTable(\"analysis_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  youtubeUrl: text(\"youtube_url\").notNull(),\n  videoTitle: text(\"video_title\"),\n  transcript: text(\"transcript\"),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"started\"),\n  currentStep: integer(\"current_step\").default(0),\n  geminiAnalysis: jsonb(\"gemini_analysis\"),\n  careerMatches: jsonb(\"career_matches\"),\n  btkRecommendations: jsonb(\"btk_recommendations\"),\n  studentReport: jsonb(\"student_report\"),\n  parentReport: jsonb(\"parent_report\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const progressUpdates = pgTable(\"progress_updates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: varchar(\"session_id\").references(() => analysisSessions.id).notNull(),\n  step: integer(\"step\").notNull(),\n  message: text(\"message\").notNull(),\n  details: jsonb(\"details\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const careerDatabase = pgTable(\"career_database\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  keywords: text(\"keywords\").array(),\n  sector: text(\"sector\"),\n  demandLevel: varchar(\"demand_level\", { length: 20 }),\n  salaryRange: text(\"salary_range\"),\n  educationRequirements: text(\"education_requirements\").array(),\n  skills: text(\"skills\").array(),\n  companies: text(\"companies\").array(),\n});\n\nexport const btkCourses = pgTable(\"btk_courses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\"),\n  keywords: text(\"keywords\").array(),\n  duration: text(\"duration\"),\n  level: varchar(\"level\", { length: 20 }),\n  url: text(\"url\"),\n  isActive: boolean(\"is_active\").default(true),\n});\n\n// Relations\nexport const analysisSessionsRelations = relations(analysisSessions, ({ many }) => ({\n  progressUpdates: many(progressUpdates),\n}));\n\nexport const progressUpdatesRelations = relations(progressUpdates, ({ one }) => ({\n  session: one(analysisSessions, {\n    fields: [progressUpdates.sessionId],\n    references: [analysisSessions.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertAnalysisSessionSchema = createInsertSchema(analysisSessions).pick({\n  youtubeUrl: true,\n});\n\nexport const insertProgressUpdateSchema = createInsertSchema(progressUpdates).pick({\n  sessionId: true,\n  step: true,\n  message: true,\n  details: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type AnalysisSession = typeof analysisSessions.$inferSelect;\nexport type InsertAnalysisSession = z.infer<typeof insertAnalysisSessionSchema>;\nexport type ProgressUpdate = typeof progressUpdates.$inferSelect;\nexport type InsertProgressUpdate = z.infer<typeof insertProgressUpdateSchema>;\nexport type Career = typeof careerDatabase.$inferSelect;\nexport type BTKCourse = typeof btkCourses.$inferSelect;\n\n// Analysis result types\nexport type GeminiAnalysis = {\n  mainTopics: string[];\n  relatedSectors: string[];\n  competencyRequirements: string[];\n  turkeyJobMarketFit: \"Yüksek\" | \"Orta\" | \"Düşük\";\n  detailedAnalysis: string;\n};\n\nexport type CareerMatch = {\n  career: string;\n  matchScore: number;\n  reasoning: string;\n  requiredSkills: string[];\n  careerPath: string[];\n  companies: string[];\n};\n\nexport type StudentReport = {\n  videoTopic: string;\n  mainTopics: string[];\n  careerAreas: CareerMatch[];\n  recommendedCourses: BTKCourse[];\n  careerRoadmap: {\n    title: string;\n    steps: string[];\n    timeline: string;\n  };\n  skillDevelopment: {\n    technical: string[];\n    soft: string[];\n  };\n  nextActions: string[];\n};\n\nexport type ParentReport = {\n  childInterests: string[];\n  careerPotential: string;\n  supportSuggestions: string[];\n  universityRecommendations: string[];\n  homeActivities: string[];\n  developmentAreas: string[];\n  industryInsights: string;\n};\n","size_bytes":4746},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport Analysis from \"@/pages/analysis\";\nimport Reports from \"@/pages/reports\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/analysis/:sessionId\" component={Analysis} />\n      <Route path=\"/reports/:sessionId\" component={Reports} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-green-50\">\n          <Router />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1020},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(263, 70%, 50%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(159, 64%, 40%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --success: hsl(142, 76%, 36%);\n  --warning: hsl(32, 95%, 44%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  --surface: hsl(210, 40%, 98%);\n  --text-primary: hsl(20, 14.3%, 4.1%);\n  --text-secondary: hsl(25, 5.3%, 44.7%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(263, 70%, 50%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(159, 64%, 40%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --success: hsl(142, 76%, 36%);\n  --warning: hsl(32, 95%, 44%);\n  --surface: hsl(240, 10%, 3.9%);\n  --text-primary: hsl(0, 0%, 98%);\n  --text-secondary: hsl(240, 5%, 64.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .animate-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n  \n  .animate-bounce-gentle {\n    animation: bounce 2s infinite;\n  }\n  \n  .animate-fade-in {\n    animation: fadeIn 0.6s ease-in-out;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.8s ease-out;\n  }\n}\n\n@keyframes fadeIn {\n  0% { \n    opacity: 0; \n    transform: translateY(20px); \n  }\n  100% { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n@keyframes slideUp {\n  0% { \n    opacity: 0; \n    transform: translateY(40px); \n  }\n  100% { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--primary));\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--primary) / 0.8);\n}\n","size_bytes":2908},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/analysis.ts":{"content":"import { AnalysisSession, GeminiAnalysis, CareerMatch, StudentReport, ParentReport } from \"@shared/schema\";\nimport { storage } from \"../storage\";\nimport { youtubeService } from \"./youtube\";\nimport { geminiService } from \"./gemini\";\nimport { btkService } from \"./btk\";\nimport { WebSocketService } from \"./websocket\";\n\nexport class AnalysisService {\n  private wsService: WebSocketService;\n\n  constructor(wsService: WebSocketService) {\n    this.wsService = wsService;\n  }\n\n  async startAnalysis(youtubeUrl: string): Promise<string> {\n    try {\n      // Create analysis session\n      const session = await storage.createAnalysisSession({ youtubeUrl });\n      \n      // Start background processing\n      this.processAnalysisAsync(session.id, youtubeUrl);\n      \n      return session.id;\n    } catch (error) {\n      console.error(\"Analiz başlatma hatası:\", error);\n      throw new Error(`Analiz başlatılamadı: ${error}`);\n    }\n  }\n\n  private async processAnalysisAsync(sessionId: string, youtubeUrl: string): Promise<void> {\n    try {\n      // Step 1: Link received\n      await this.sendProgress(sessionId, 1, \"Linki aldık\", {\n        message: \"YouTube bağlantısı sisteme başarıyla alındı\",\n        status: \"completed\"\n      });\n\n      // Step 2: Extract transcript\n      await this.sendProgress(sessionId, 2, \"Transkript çıkarılıyor\", {\n        message: \"Video içeriği metne dönüştürülüyor...\",\n        status: \"processing\"\n      });\n\n      const videoDetails = await youtubeService.getVideoDetails(youtubeUrl);\n      const transcript = await youtubeService.extractTranscript(youtubeUrl);\n      \n      await storage.updateAnalysisSession(sessionId, {\n        videoTitle: videoDetails.title,\n        transcript,\n        currentStep: 2\n      });\n\n      await this.sendProgress(sessionId, 2, \"Transkript çıkarıldı\", {\n        message: \"Video içeriği başarıyla metne dönüştürüldü\",\n        status: \"completed\"\n      });\n\n      // Step 3: Gemini analysis\n      await this.sendProgress(sessionId, 3, \"Gemini analizi yapılıyor\", {\n        message: \"AI konuları ve kariyer bağlantılarını analiz ediyor\",\n        status: \"processing\"\n      });\n\n      const geminiAnalysis = await geminiService.analyzeVideoTranscript(transcript, videoDetails.title);\n      \n      await storage.updateAnalysisSession(sessionId, {\n        geminiAnalysis,\n        currentStep: 3\n      });\n\n      await this.sendProgress(sessionId, 3, \"Gemini analizi tamamlandı\", {\n        message: \"AI analizi başarıyla tamamlandı\",\n        status: \"completed\",\n        analysis: geminiAnalysis\n      });\n\n      // Step 4: Career matching\n      await this.sendProgress(sessionId, 4, \"Kariyer eşleştirmesi\", {\n        message: \"Konular meslek alanlarıyla ilişkilendiriliyor\",\n        status: \"processing\"\n      });\n\n      const careerMatches = await geminiService.matchCareersToTopics(geminiAnalysis);\n      \n      await storage.updateAnalysisSession(sessionId, {\n        careerMatches,\n        currentStep: 4\n      });\n\n      await this.sendProgress(sessionId, 4, \"Kariyer eşleştirmesi tamamlandı\", {\n        message: \"Meslek alanları başarıyla eşleştirildi\",\n        status: \"completed\"\n      });\n\n      // Step 5: BTK recommendations\n      await this.sendProgress(sessionId, 5, \"BTK önerileri hazırlanıyor\", {\n        message: \"İlgini çekebilecek kurslar aranıyor\",\n        status: \"processing\"\n      });\n\n      const btkCourses = await btkService.searchCourses(geminiAnalysis.mainTopics);\n      \n      await storage.updateAnalysisSession(sessionId, {\n        btkRecommendations: btkCourses,\n        currentStep: 5\n      });\n\n      await this.sendProgress(sessionId, 5, \"BTK önerileri hazırlandı\", {\n        message: \"Kurs önerileri belirlendi\",\n        status: \"completed\"\n      });\n\n      // Step 6: Student report generation\n      await this.sendProgress(sessionId, 6, \"Öğrenci raporu oluşturuluyor\", {\n        message: \"Sana özel kariyer rehberi hazırlanıyor\",\n        status: \"processing\"\n      });\n\n      const studentReport = await geminiService.generateStudentReport(\n        videoDetails.title,\n        geminiAnalysis,\n        careerMatches,\n        btkCourses\n      );\n\n      await storage.updateAnalysisSession(sessionId, {\n        studentReport,\n        currentStep: 6\n      });\n\n      await this.sendProgress(sessionId, 6, \"Öğrenci raporu oluşturuldu\", {\n        message: \"Kişisel kariyer rehberin hazır\",\n        status: \"completed\"\n      });\n\n      // Step 7: Parent report generation\n      await this.sendProgress(sessionId, 7, \"Veli raporu oluşturuluyor\", {\n        message: \"Aileler için destek kılavuzu oluşturuluyor\",\n        status: \"processing\"\n      });\n\n      const parentReport = await geminiService.generateParentReport(\n        videoDetails.title,\n        geminiAnalysis,\n        careerMatches\n      );\n\n      await storage.updateAnalysisSession(sessionId, {\n        parentReport,\n        currentStep: 7,\n        status: \"completed\",\n        completedAt: new Date()\n      });\n\n      await this.sendProgress(sessionId, 7, \"Analiz tamamlandı!\", {\n        message: \"Tüm raporlar hazır. Artık inceleyebilirsin!\",\n        status: \"completed\",\n        analysisComplete: true\n      });\n\n    } catch (error) {\n      console.error(`Analiz hatası (Session: ${sessionId}):`, error);\n      \n      await storage.updateAnalysisSession(sessionId, {\n        status: \"failed\"\n      });\n\n      await this.sendProgress(sessionId, -1, \"Analiz başarısız\", {\n        message: `Bir hata oluştu: ${error}`,\n        status: \"error\"\n      });\n    }\n  }\n\n  async sendProgress(sessionId: string, step: number, message: string, details?: any): Promise<void> {\n    // Save to database\n    await storage.addProgressUpdate(sessionId, {\n      step,\n      message,\n      details\n    });\n\n    // Send via WebSocket\n    this.wsService.broadcastProgress({\n      sessionId,\n      step,\n      message,\n      timestamp: new Date(),\n      details\n    });\n  }\n\n  async getAnalysisStatus(sessionId: string): Promise<AnalysisSession | null> {\n    const session = await storage.getAnalysisSession(sessionId);\n    return session || null;\n  }\n}\n","size_bytes":6174},"server/services/btk.ts":{"content":"import { BTKCourse } from \"@shared/schema\";\n\nexport class BTKService {\n  private baseUrl: string = \"https://www.btkakademi.gov.tr\";\n\n  async searchCourses(keywords: string[]): Promise<BTKCourse[]> {\n    try {\n      // In a real implementation, this would call BTK Academy's API\n      // For now, we'll return mock data based on common keywords\n      \n      const mockCourses = await this.getMockBTKCourses();\n      \n      // Filter courses based on keywords\n      const relevantCourses = mockCourses.filter(course => \n        keywords.some(keyword => \n          course.title.toLowerCase().includes(keyword.toLowerCase()) ||\n          course.description.toLowerCase().includes(keyword.toLowerCase()) ||\n          course.keywords?.some(k => k.toLowerCase().includes(keyword.toLowerCase()))\n        )\n      );\n\n      return relevantCourses.slice(0, 5); // Return top 5 matches\n    } catch (error) {\n      console.error(\"BTK kurs arama hatası:\", error);\n      return [];\n    }\n  }\n\n  async getCoursesByCategory(category: string): Promise<BTKCourse[]> {\n    try {\n      const allCourses = await this.getMockBTKCourses();\n      return allCourses.filter(course => \n        course.category.toLowerCase().includes(category.toLowerCase())\n      ).slice(0, 10);\n    } catch (error) {\n      console.error(\"BTK kategori arama hatası:\", error);\n      return [];\n    }\n  }\n\n  private async getMockBTKCourses(): Promise<BTKCourse[]> {\n    // This would be replaced with actual API calls in production\n    return [\n      {\n        id: \"btk-1\",\n        title: \"Python ile Makine Öğrenmesi\",\n        description: \"Python programlama dili kullanarak makine öğrenmesi algoritmalarını öğrenin\",\n        category: \"Yazılım\",\n        keywords: [\"python\", \"makine öğrenmesi\", \"veri bilimi\", \"algoritma\"],\n        duration: \"40 saat\",\n        level: \"Orta\",\n        url: \"https://www.btkakademi.gov.tr/portal/course/python-ile-makine-ogrenmesi\",\n        isActive: true\n      },\n      {\n        id: \"btk-2\",\n        title: \"Veri Bilimi için Python ve TensorFlow\",\n        description: \"TensorFlow kütüphanesi ile derin öğrenme projelerini geliştirin\",\n        category: \"Yazılım\",\n        keywords: [\"python\", \"tensorflow\", \"derin öğrenme\", \"veri bilimi\"],\n        duration: \"60 saat\",\n        level: \"İleri\",\n        url: \"https://www.btkakademi.gov.tr/portal/course/veri-bilimi-python-tensorflow\",\n        isActive: true\n      },\n      {\n        id: \"btk-3\",\n        title: \"Coğrafi Bilgi Sistemleri (CBS)\",\n        description: \"CBS yazılımları ve haritacılık uygulamalarını öğrenin\",\n        category: \"Coğrafya\",\n        keywords: [\"cbs\", \"gis\", \"harita\", \"coğrafya\", \"analiz\"],\n        duration: \"35 saat\",\n        level: \"Başlangıç\",\n        url: \"https://www.btkakademi.gov.tr/portal/course/cbs\",\n        isActive: true\n      },\n      {\n        id: \"btk-4\",\n        title: \"İklim Veri Analizi\",\n        description: \"Meteoroloji verileri analizi ve iklim modelleme\",\n        category: \"Bilim\",\n        keywords: [\"iklim\", \"meteoroloji\", \"veri analizi\", \"çevre\"],\n        duration: \"25 saat\",\n        level: \"Orta\",\n        url: \"https://www.btkakademi.gov.tr/portal/course/iklim-veri-analizi\",\n        isActive: true\n      },\n      {\n        id: \"btk-5\",\n        title: \"Biyoinformatik Temelleri\",\n        description: \"Biyolojik verilerin bilgisayar destekli analizi\",\n        category: \"Biyoloji\",\n        keywords: [\"biyoinformatik\", \"biyoloji\", \"genetik\", \"analiz\"],\n        duration: \"45 saat\",\n        level: \"İleri\",\n        url: \"https://www.btkakademi.gov.tr/portal/course/biyoinformatik\",\n        isActive: true\n      },\n      {\n        id: \"btk-6\",\n        title: \"Yapay Zeka Etiği ve Uygulamaları\",\n        description: \"AI teknolojilerinin etik kullanımı ve uygulamaları\",\n        category: \"Teknoloji\",\n        keywords: [\"yapay zeka\", \"ai\", \"etik\", \"teknoloji\"],\n        duration: \"20 saat\",\n        level: \"Başlangıç\",\n        url: \"https://www.btkakademi.gov.tr/portal/course/ai-etik\",\n        isActive: true\n      },\n      {\n        id: \"btk-7\",\n        title: \"Su Kaynakları Yönetimi\",\n        description: \"Su kaynaklarının sürdürülebilir yönetimi ve korunması\",\n        category: \"Çevre\",\n        keywords: [\"su\", \"çevre\", \"sürdürülebilirlik\", \"kaynak yönetimi\"],\n        duration: \"30 saat\",\n        level: \"Orta\",\n        url: \"https://www.btkakademi.gov.tr/portal/course/su-kaynaklari\",\n        isActive: true\n      },\n      {\n        id: \"btk-8\",\n        title: \"Mikrobiyoloji Laboratuvar Teknikleri\",\n        description: \"Modern mikrobiyoloji laboratuvarında kullanılan teknikler\",\n        category: \"Biyoloji\",\n        keywords: [\"mikrobiyoloji\", \"laboratuvar\", \"teknik\", \"analiz\"],\n        duration: \"40 saat\",\n        level: \"İleri\",\n        url: \"https://www.btkakademi.gov.tr/portal/course/mikrobiyoloji-lab\",\n        isActive: true\n      }\n    ];\n  }\n}\n\nexport const btkService = new BTKService();\n","size_bytes":4981},"server/services/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\nimport { GeminiAnalysis, CareerMatch } from \"@shared/schema\";\n\nconst ai = new GoogleGenAI({ \n  apiKey: process.env.GEMINI_API_KEY || process.env.GOOGLE_AI_API_KEY || \"\"\n});\n\nexport class GeminiAnalysisService {\n  async analyzeVideoTranscript(transcript: string, videoTitle?: string): Promise<GeminiAnalysis> {\n    try {\n      const systemPrompt = `Sen Türkiye eğitim sisteminde uzman bir kariyer danışmanısın. \n      YouTube videosundaki eğitim içeriklerini analiz ederek öğrencilerin gerçek hayat kariyer bağlantılarını keşfediyorsun.\n\n      Video transkriptini analiz et ve şu bilgileri çıkar:\n      1. Ana konular (teknik ve akademik konuların listesi)\n      2. İlgili sektörler (bu konuların kullanıldığı endüstri alanları)\n      3. Yetkinlik gereksinimleri (bu alanda çalışmak için gerekli beceriler)\n      4. Türkiye iş pazarı uyumu (Yüksek/Orta/Düşük)\n      5. Detaylı analiz (öğrenci için açıklayıcı paragraf)\n\n      JSON formatında yanıtla.`;\n\n      const prompt = `${videoTitle ? `Video Başlığı: ${videoTitle}\\n\\n` : ''}Transkript:\\n${transcript}`;\n\n      const response = await ai.models.generateContent({\n        model: \"gemini-2.5-pro\",\n        config: {\n          systemInstruction: systemPrompt,\n          responseMimeType: \"application/json\",\n          responseSchema: {\n            type: \"object\",\n            properties: {\n              mainTopics: { \n                type: \"array\", \n                items: { type: \"string\" }\n              },\n              relatedSectors: { \n                type: \"array\", \n                items: { type: \"string\" }\n              },\n              competencyRequirements: { \n                type: \"array\", \n                items: { type: \"string\" }\n              },\n              turkeyJobMarketFit: { \n                type: \"string\", \n                enum: [\"Yüksek\", \"Orta\", \"Düşük\"]\n              },\n              detailedAnalysis: { \n                type: \"string\" \n              }\n            },\n            required: [\"mainTopics\", \"relatedSectors\", \"competencyRequirements\", \"turkeyJobMarketFit\", \"detailedAnalysis\"]\n          }\n        },\n        contents: prompt,\n      });\n\n      const rawJson = response.text;\n      if (!rawJson) {\n        throw new Error(\"Gemini'den boş yanıt alındı\");\n      }\n\n      return JSON.parse(rawJson) as GeminiAnalysis;\n    } catch (error) {\n      console.error(\"Gemini analiz hatası:\", error);\n      throw new Error(`Video analizi başarısız: ${error}`);\n    }\n  }\n\n  async matchCareersToTopics(analysis: GeminiAnalysis): Promise<CareerMatch[]> {\n    try {\n      const systemPrompt = `Sen Türkiye'deki kariyer fırsatları konusunda uzman bir danışmansın.\n      Video analizine dayanarak en uygun 5 kariyer alanını belirle ve her biri için detaylı bilgi ver.\n      \n      Her kariyer için şunları belirt:\n      1. Kariyer adı\n      2. Eşleşme skoru (0-100)\n      3. Neden uygun olduğunu açıklayan gerekçe\n      4. Gerekli beceriler listesi\n      5. Kariyer yolu adımları\n      6. Bu alanda çalışabilecek örnek şirketler (Türkiye'deki)\n\n      JSON formatında yanıtla.`;\n\n      const prompt = `Analiz Sonuçları:\nAna Konular: ${analysis.mainTopics.join(', ')}\nİlgili Sektörler: ${analysis.relatedSectors.join(', ')}\nYetkinlik Gereksinimleri: ${analysis.competencyRequirements.join(', ')}\nİş Pazarı Uyumu: ${analysis.turkeyJobMarketFit}`;\n\n      const response = await ai.models.generateContent({\n        model: \"gemini-2.5-pro\",\n        config: {\n          systemInstruction: systemPrompt,\n          responseMimeType: \"application/json\",\n          responseSchema: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                career: { type: \"string\" },\n                matchScore: { type: \"number\" },\n                reasoning: { type: \"string\" },\n                requiredSkills: { \n                  type: \"array\", \n                  items: { type: \"string\" }\n                },\n                careerPath: { \n                  type: \"array\", \n                  items: { type: \"string\" }\n                },\n                companies: { \n                  type: \"array\", \n                  items: { type: \"string\" }\n                }\n              },\n              required: [\"career\", \"matchScore\", \"reasoning\", \"requiredSkills\", \"careerPath\", \"companies\"]\n            }\n          }\n        },\n        contents: prompt,\n      });\n\n      const rawJson = response.text;\n      if (!rawJson) {\n        throw new Error(\"Kariyer eşleştirme yanıtı boş\");\n      }\n\n      return JSON.parse(rawJson) as CareerMatch[];\n    } catch (error) {\n      console.error(\"Kariyer eşleştirme hatası:\", error);\n      throw new Error(`Kariyer analizi başarısız: ${error}`);\n    }\n  }\n\n  async generateStudentReport(\n    videoTitle: string,\n    analysis: GeminiAnalysis, \n    careerMatches: CareerMatch[],\n    btkCourses: any[]\n  ): Promise<any> {\n    try {\n      const systemPrompt = `Sen öğrencilere yönelik kariyer rehberi hazırlayan bir uzmansın.\n      Analiz sonuçlarına dayanarak kapsamlı bir öğrenci raporu hazırla.\n      \n      Raporda şunlar olsun:\n      1. Video konusu özeti\n      2. Tespit edilen ana konular\n      3. Önerilen kariyer alanları (en yüksek skorlu 3 tanesi)\n      4. Önerilen kurslar\n      5. Kariyer yol haritası (başlık, adımlar, zaman çizelgesi)\n      6. Beceri geliştirme önerileri (teknik ve soft skill)\n      7. Bir sonraki adımlar\n\n      Samimi, motive edici ve Türkçe bir ton kullan.`;\n\n      const prompt = `Video: ${videoTitle}\nAnaliz: ${JSON.stringify(analysis)}\nKariyer Eşleştirmeleri: ${JSON.stringify(careerMatches)}\nBTK Kursları: ${JSON.stringify(btkCourses)}`;\n\n      const response = await ai.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        config: {\n          systemInstruction: systemPrompt\n        },\n        contents: prompt,\n      });\n\n      return {\n        videoTopic: videoTitle,\n        mainTopics: analysis.mainTopics,\n        careerAreas: careerMatches.slice(0, 3),\n        recommendedCourses: btkCourses,\n        content: response.text\n      };\n    } catch (error) {\n      console.error(\"Öğrenci raporu oluşturma hatası:\", error);\n      throw new Error(`Öğrenci raporu oluşturulamadı: ${error}`);\n    }\n  }\n\n  async generateParentReport(\n    videoTitle: string,\n    analysis: GeminiAnalysis,\n    careerMatches: CareerMatch[]\n  ): Promise<any> {\n    try {\n      const systemPrompt = `Sen veliler için kariyer rehberi hazırlayan bir uzmansın.\n      Analiz sonuçlarına dayanarak velilere yönelik bir destek kılavuzu hazırla.\n      \n      Raporda şunlar olsun:\n      1. Çocuğun ilgi alanları\n      2. Kariyer potansiyeli değerlendirmesi\n      3. Nasıl destekleyebileceğinize dair öneriler\n      4. Üniversite bölüm önerileri\n      5. Evde yapılabilecek aktiviteler\n      6. Geliştirilmesi gereken alanlar\n      7. Sektör hakkında bilgiler\n\n      Anlayışlı, destekleyici ve pratik bir ton kullan.`;\n\n      const prompt = `Video: ${videoTitle}\nAnaliz: ${JSON.stringify(analysis)}\nKariyer Eşleştirmeleri: ${JSON.stringify(careerMatches)}`;\n\n      const response = await ai.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        config: {\n          systemInstruction: systemPrompt\n        },\n        contents: prompt,\n      });\n\n      return {\n        childInterests: analysis.mainTopics,\n        content: response.text\n      };\n    } catch (error) {\n      console.error(\"Veli raporu oluşturma hatası:\", error);\n      throw new Error(`Veli raporu oluşturulamadı: ${error}`);\n    }\n  }\n}\n\nexport const geminiService = new GeminiAnalysisService();\n","size_bytes":7781},"server/services/websocket.ts":{"content":"import { WebSocketServer, WebSocket } from \"ws\";\nimport { Server } from \"http\";\nimport { ProgressUpdate } from \"@shared/schema\";\n\nexport interface WebSocketMessage {\n  type: string;\n  data: any;\n  sessionId?: string;\n}\n\nexport class WebSocketService {\n  private wss: WebSocketServer;\n  private clients: Map<WebSocket, string> = new Map();\n\n  constructor(server: Server) {\n    this.wss = new WebSocketServer({ \n      server,\n      path: \"/ws\"\n    });\n    this.setupWebSocketServer();\n  }\n\n  private setupWebSocketServer(): void {\n    this.wss.on(\"connection\", (ws: WebSocket, request) => {\n      console.log(\"New WebSocket connection\");\n\n      ws.on(\"message\", (message: Buffer) => {\n        try {\n          const data = JSON.parse(message.toString()) as WebSocketMessage;\n          this.handleMessage(ws, data);\n        } catch (error) {\n          console.error(\"WebSocket message parse error:\", error);\n        }\n      });\n\n      ws.on(\"close\", () => {\n        this.clients.delete(ws);\n        console.log(\"WebSocket connection closed\");\n      });\n\n      ws.on(\"error\", (error) => {\n        console.error(\"WebSocket error:\", error);\n        this.clients.delete(ws);\n      });\n\n      // Send connection confirmation\n      this.sendToClient(ws, {\n        type: \"connection\",\n        data: { status: \"connected\", timestamp: new Date() }\n      });\n    });\n  }\n\n  private handleMessage(ws: WebSocket, message: WebSocketMessage): void {\n    switch (message.type) {\n      case \"subscribe\":\n        if (message.sessionId) {\n          this.clients.set(ws, message.sessionId);\n          console.log(`Client subscribed to session: ${message.sessionId}`);\n        }\n        break;\n      \n      case \"ping\":\n        this.sendToClient(ws, {\n          type: \"pong\",\n          data: { timestamp: new Date() }\n        });\n        break;\n\n      default:\n        console.log(\"Unknown WebSocket message type:\", message.type);\n    }\n  }\n\n  broadcastProgress(progress: ProgressUpdate): void {\n    const message: WebSocketMessage = {\n      type: \"progress\",\n      data: progress,\n      sessionId: progress.sessionId\n    };\n\n    // Send to all clients subscribed to this session\n    this.clients.forEach((sessionId, ws) => {\n      if (sessionId === progress.sessionId) {\n        this.sendToClient(ws, message);\n      }\n    });\n\n    // Also broadcast to all clients (for general updates)\n    this.broadcast(message);\n  }\n\n  private sendToClient(ws: WebSocket, message: WebSocketMessage): void {\n    if (ws.readyState === WebSocket.OPEN) {\n      try {\n        ws.send(JSON.stringify(message));\n      } catch (error) {\n        console.error(\"Error sending WebSocket message:\", error);\n      }\n    }\n  }\n\n  private broadcast(message: WebSocketMessage): void {\n    this.wss.clients.forEach((ws) => {\n      if (ws.readyState === WebSocket.OPEN) {\n        try {\n          ws.send(JSON.stringify(message));\n        } catch (error) {\n          console.error(\"Error broadcasting WebSocket message:\", error);\n        }\n      }\n    });\n  }\n\n  getConnectedClientsCount(): number {\n    return this.wss.clients.size;\n  }\n\n  closeAll(): void {\n    this.wss.clients.forEach(ws => {\n      ws.close();\n    });\n    this.wss.close();\n  }\n}\n","size_bytes":3196},"server/services/youtube.ts":{"content":"export class YouTubeService {\n  private apiKey: string;\n\n  constructor() {\n    this.apiKey = process.env.YOUTUBE_API_KEY || process.env.GOOGLE_API_KEY || \"\";\n  }\n\n  validateYouTubeURL(url: string): boolean {\n    const regex = /^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.be)\\/.+/;\n    return regex.test(url);\n  }\n\n  extractVideoId(url: string): string | null {\n    const regex = /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/)([^&\\n?#]+)/;\n    const match = url.match(regex);\n    return match ? match[1] : null;\n  }\n\n  async getVideoDetails(url: string): Promise<{ title: string; description: string; duration: string }> {\n    try {\n      if (!this.validateYouTubeURL(url)) {\n        throw new Error(\"Geçersiz YouTube URL\");\n      }\n\n      const videoId = this.extractVideoId(url);\n      if (!videoId) {\n        throw new Error(\"Video ID çıkarılamadı\");\n      }\n\n      const apiUrl = `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=${this.apiKey}&part=snippet,contentDetails`;\n      \n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error(`YouTube API hatası: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      if (!data.items || data.items.length === 0) {\n        throw new Error(\"Video bulunamadı\");\n      }\n\n      const video = data.items[0];\n      return {\n        title: video.snippet.title,\n        description: video.snippet.description,\n        duration: video.contentDetails.duration\n      };\n    } catch (error) {\n      console.error(\"YouTube video detayları alınamadı:\", error);\n      throw error;\n    }\n  }\n\n  async extractTranscript(url: string): Promise<string> {\n    try {\n      const videoDetails = await this.getVideoDetails(url);\n      \n      // In a real implementation, you would use a service like youtube-transcript\n      // or implement caption extraction. For now, we'll use the description as a fallback\n      // and add some simulated processing delay\n      \n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      if (videoDetails.description && videoDetails.description.length > 100) {\n        return videoDetails.description;\n      }\n\n      // Fallback: Generate a basic transcript indication\n      return `Video transkripti: \"${videoDetails.title}\" başlıklı video içeriği analiz için hazırlandı. \n      Video süresi: ${videoDetails.duration}. \n      Gerçek implementasyonda burası youtube-transcript paketi ile otomatik transkript çıkarma işlemi yapılacak.\n      Şimdilik video açıklaması transcript yerine kullanılıyor: ${videoDetails.description}`;\n    } catch (error) {\n      console.error(\"Transcript çıkarma hatası:\", error);\n      throw new Error(`Video transcript'i alınamadı: ${error}`);\n    }\n  }\n\n  formatDuration(duration: string): string {\n    // Convert ISO 8601 duration to readable format\n    const match = duration.match(/PT(\\d+H)?(\\d+M)?(\\d+S)?/);\n    if (!match) return \"Bilinmeyen\";\n\n    const hours = parseInt(match[1]) || 0;\n    const minutes = parseInt(match[2]) || 0;\n    const seconds = parseInt(match[3]) || 0;\n\n    let formatted = \"\";\n    if (hours > 0) formatted += `${hours}s `;\n    if (minutes > 0) formatted += `${minutes}dk `;\n    if (seconds > 0 && hours === 0) formatted += `${seconds}sn`;\n\n    return formatted.trim();\n  }\n}\n\nexport const youtubeService = new YouTubeService();\n","size_bytes":3397},"client/src/components/features-section.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Brain, \n  Network, \n  GraduationCap, \n  University, \n  Users, \n  MemoryStick,\n  Sparkles,\n  Zap,\n  Target,\n  Rocket,\n  BookOpen,\n  TrendingUp\n} from \"lucide-react\";\n\nconst features = [\n  {\n    icon: Brain,\n    title: \"Gemini AI Analizi\",\n    description: \"Google'ın en gelişmiş AI modeliyle video içeriklerini derinlemesine analiz edip kariyer bağlantılarını keşfediyoruz.\",\n    gradient: \"from-blue-50 to-blue-100\",\n    color: \"bg-primary\",\n    textColor: \"text-primary\"\n  },\n  {\n    icon: Network,\n    title: \"Akıllı Eşleştirme\",\n    description: \"Öğrendiğin konuları gerçek meslek alanlarıyla eşleştirerek kariyer yolculuğuna rehberlik ediyoruz.\",\n    gradient: \"from-purple-50 to-purple-100\",\n    color: \"bg-secondary\",\n    textColor: \"text-secondary\"\n  },\n  {\n    icon: GraduationCap,\n    title: \"BTK Akademi Entegrasyonu\",\n    description: \"BTK Akademi'den ilgili kursları otomatik önererek becerilerini geliştirmene yardımcı oluyoruz.\",\n    gradient: \"from-green-50 to-green-100\",\n    color: \"bg-accent\",\n    textColor: \"text-accent\"\n  },\n  {\n    icon: University,\n    title: \"Kişisel Kariyer Raporu\",\n    description: \"Sana özel hazırlanmış detaylı kariyer rehberi ve adım adım gelişim planı alıyorsun.\",\n    gradient: \"from-orange-50 to-orange-100\",\n    color: \"bg-warning\",\n    textColor: \"text-warning\"\n  },\n  {\n    icon: Users,\n    title: \"Veli Destek Kılavuzu\",\n    description: \"Ailelerin çocuklarının kariyer gelişimini desteklemesi için hazırlanmış rehber materyaller.\",\n    gradient: \"from-pink-50 to-pink-100\",\n    color: \"bg-pink-500\",\n    textColor: \"text-pink-500\"\n  },\n  {\n    icon: MemoryStick,\n    title: \"Akıllı Hafıza Sistemi\",\n    description: \"Agent memory ile geçmiş analizlerini hatırlayarak daha kişiselleştirilmiş öneriler sunuyoruz.\",\n    gradient: \"from-indigo-50 to-indigo-100\",\n    color: \"bg-indigo-500\",\n    textColor: \"text-indigo-500\"\n  }\n];\n\nconst additionalFeatures = [\n  {\n    icon: Target,\n    title: \"7 Aşamalı Analiz\",\n    description: \"Link alımından rapor oluşumuna kadar şeffaf süreç takibi\"\n  },\n  {\n    icon: Rocket,\n    title: \"Gerçek Zamanlı İşlem\",\n    description: \"WebSocket ile anlık progress güncellemeleri\"\n  },\n  {\n    icon: BookOpen,\n    title: \"MEB Uyumlu\",\n    description: \"Türk eğitim sistemine özel kariyer rehberliği\"\n  },\n  {\n    icon: TrendingUp,\n    title: \"Türkiye Odaklı\",\n    description: \"Yerel iş pazarı ve şirket analizleri\"\n  }\n];\n\nexport default function FeaturesSection() {\n  return (\n    <section id=\"features\" className=\"py-20 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <div className=\"inline-flex items-center space-x-2 mb-4\">\n            <Sparkles className=\"w-8 h-8 text-warning animate-pulse\" />\n            <h2 className=\"text-4xl font-bold text-text-primary\">Neden PusulaAI?</h2>\n            <Zap className=\"w-8 h-8 text-accent animate-bounce\" />\n          </div>\n          <p className=\"text-xl text-text-secondary max-w-3xl mx-auto\">\n            Gemini AI teknolojisi ile akademik içerikleri gerçek kariyer fırsatlarına dönüştürüyoruz\n          </p>\n        </div>\n\n        {/* Main Features Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\">\n          {features.map((feature, index) => (\n            <Card\n              key={index}\n              className={`bg-gradient-to-br ${feature.gradient} shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 border-0`}\n            >\n              <CardContent className=\"p-8\">\n                <div className={`w-12 h-12 ${feature.color} rounded-lg flex items-center justify-center mb-6`}>\n                  <feature.icon className=\"text-white w-6 h-6\" />\n                </div>\n                <h3 className={`text-xl font-bold ${feature.textColor} mb-4`}>\n                  {feature.title}\n                </h3>\n                <p className=\"text-text-secondary leading-relaxed\">\n                  {feature.description}\n                </p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Additional Features */}\n        <div className=\"bg-gradient-to-r from-gray-50 to-white rounded-2xl p-8 shadow-inner\">\n          <h3 className=\"text-2xl font-bold text-text-primary text-center mb-8\">\n            Ek Özellikler\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {additionalFeatures.map((feature, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <feature.icon className=\"text-white w-6 h-6\" />\n                </div>\n                <h4 className=\"font-semibold text-text-primary mb-2\">{feature.title}</h4>\n                <p className=\"text-sm text-text-secondary\">{feature.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Technology Stack */}\n        <div className=\"mt-16 text-center\">\n          <h3 className=\"text-xl font-semibold text-text-primary mb-6\">\n            Teknoloji Altyapımız\n          </h3>\n          <div className=\"flex flex-wrap justify-center items-center gap-8 opacity-60\">\n            <div className=\"flex items-center space-x-2\">\n              <Brain className=\"w-5 h-5 text-primary\" />\n              <span className=\"text-sm font-medium\">Gemini 2.5 Pro</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Network className=\"w-5 h-5 text-secondary\" />\n              <span className=\"text-sm font-medium\">WebSocket</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <MemoryStick className=\"w-5 h-5 text-accent\" />\n              <span className=\"text-sm font-medium\">Agent MemoryStick</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <GraduationCap className=\"w-5 h-5 text-warning\" />\n              <span className=\"text-sm font-medium\">BTK API</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6390},"client/src/components/hero-section.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Rocket, Youtube, Brain, Sparkles, Zap } from \"lucide-react\";\n\nexport default function HeroSection() {\n  const [youtubeUrl, setYoutubeUrl] = useState(\"\");\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const startAnalysisMutation = useMutation({\n    mutationFn: async (youtubeUrl: string) => {\n      const response = await apiRequest(\"POST\", \"/api/analysis/start\", { youtubeUrl });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Analiz Başlatıldı! 🚀\",\n        description: \"Gemini AI videonuzu işlemeye başladı\",\n      });\n      setLocation(`/analysis/${data.sessionId}`);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"Analiz başlatılamadı\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const validateYouTubeURL = (url: string): boolean => {\n    const regex = /^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.be)\\/.+/;\n    return regex.test(url);\n  };\n\n  const handleStartAnalysis = () => {\n    if (!youtubeUrl.trim()) {\n      toast({\n        title: \"URL Gerekli\",\n        description: \"Lütfen bir YouTube video linki girin\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!validateYouTubeURL(youtubeUrl)) {\n      toast({\n        title: \"Geçersiz URL\",\n        description: \"Lütfen geçerli bir YouTube video linki girin\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    startAnalysisMutation.mutate(youtubeUrl);\n  };\n\n  return (\n    <section className=\"bg-gradient-to-br from-blue-50 via-purple-50 to-green-50 py-20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          {/* Hero Title */}\n          <div className=\"relative inline-block mb-8\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-primary/20 to-secondary/20 blur-3xl\"></div>\n            <h2 className=\"relative text-4xl md:text-6xl font-bold text-text-primary leading-tight\">\n              <span className=\"text-primary\">Öğrendiklerim</span> gerçek hayatta<br/>\n              <span className=\"text-secondary\">ne işe yarayacak ki?</span>\n              <div className=\"absolute -top-4 -right-4\">\n                <Sparkles className=\"w-8 h-8 text-warning animate-pulse\" />\n              </div>\n            </h2>\n          </div>\n          \n          <p className=\"text-xl md:text-2xl text-text-secondary mb-8 max-w-4xl mx-auto leading-relaxed\">\n            diye sorguluyorsan cevabı bulmak için <span className=\"font-semibold text-accent\">doğru yerdesin.</span><br/>\n            AI destekli kariyer rehberimizle akademik içerikleri gerçek meslek alanlarıyla eşleştiriyoruz.\n          </p>\n\n          {/* Analysis Input Card */}\n          <Card className=\"max-w-2xl mx-auto bg-white/90 backdrop-blur-sm shadow-2xl border-0\">\n            <CardContent className=\"p-8\">\n              <div className=\"space-y-6\">\n                {/* Header */}\n                <div className=\"flex items-center justify-center space-x-3 mb-6\">\n                  <Brain className=\"w-8 h-8 text-primary animate-pulse\" />\n                  <h3 className=\"text-2xl font-bold text-text-primary\">\n                    Gemini AI ile Analiz Et\n                  </h3>\n                  <Zap className=\"w-8 h-8 text-warning animate-bounce\" />\n                </div>\n\n                {/* URL Input */}\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"youtube-url\" className=\"text-left text-base font-semibold text-text-primary flex items-center\">\n                    <Youtube className=\"mr-2 w-5 h-5 text-red-500\" />\n                    YouTube Video Linki\n                  </Label>\n                  <Input\n                    id=\"youtube-url\"\n                    type=\"url\"\n                    placeholder=\"https://www.youtube.com/watch?v=...\"\n                    value={youtubeUrl}\n                    onChange={(e) => setYoutubeUrl(e.target.value)}\n                    className=\"h-12 text-lg border-2 border-gray-200 focus:border-primary transition-all\"\n                    disabled={startAnalysisMutation.isPending}\n                  />\n                </div>\n\n                {/* Start Button */}\n                <Button\n                  onClick={handleStartAnalysis}\n                  disabled={startAnalysisMutation.isPending}\n                  className=\"w-full h-12 text-lg font-bold bg-gradient-to-r from-primary to-secondary hover:from-blue-700 hover:to-purple-700 text-white shadow-lg hover:shadow-xl transition-all transform hover:scale-105 disabled:transform-none\"\n                >\n                  {startAnalysisMutation.isPending ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                      <span>Başlatılıyor...</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center space-x-2\">\n                      <Rocket className=\"w-5 h-5\" />\n                      <span>Gemini AI ile Analizi Başlat</span>\n                    </div>\n                  )}\n                </Button>\n\n                {/* Features List */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 pt-6 border-t border-gray-200\">\n                  <div className=\"text-center\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-2\">\n                      <Brain className=\"w-5 h-5 text-primary\" />\n                    </div>\n                    <p className=\"text-sm font-medium text-text-primary\">Gemini AI Analizi</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"w-10 h-10 bg-secondary/10 rounded-full flex items-center justify-center mx-auto mb-2\">\n                      <Rocket className=\"w-5 h-5 text-secondary\" />\n                    </div>\n                    <p className=\"text-sm font-medium text-text-primary\">Hızlı İşlem</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"w-10 h-10 bg-accent/10 rounded-full flex items-center justify-center mx-auto mb-2\">\n                      <Sparkles className=\"w-5 h-5 text-accent\" />\n                    </div>\n                    <p className=\"text-sm font-medium text-text-primary\">Detaylı Rapor</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Stats Row */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto mt-12\">\n            <Card className=\"bg-white/70 backdrop-blur-sm border-0 shadow-lg\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-3xl font-bold text-primary mb-2\">2-3dk</div>\n                <div className=\"text-text-secondary\">Ortalama analiz süresi</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-white/70 backdrop-blur-sm border-0 shadow-lg\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-3xl font-bold text-secondary mb-2\">50+</div>\n                <div className=\"text-text-secondary\">Farklı kariyer alanı</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-white/70 backdrop-blur-sm border-0 shadow-lg\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"text-3xl font-bold text-accent mb-2\">BTK</div>\n                <div className=\"text-text-secondary\">Akademi entegrasyonu</div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":8297},"client/src/components/how-it-works-section.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Youtube, \n  Brain, \n  Network, \n  FileText, \n  ArrowRight,\n  Clock,\n  Zap,\n  Target,\n  Sparkles\n} from \"lucide-react\";\n\nconst steps = [\n  {\n    number: 1,\n    title: \"YouTube Linki Gir\",\n    description: \"Merak ettiğin eğitim videosunun linkini yapıştır. Sistemimiz otomatik olarak video içeriğini analiz etmeye başlar.\",\n    icon: Youtube,\n    gradient: \"from-red-400 to-red-600\",\n    bgGradient: \"from-red-50 to-red-100\"\n  },\n  {\n    number: 2,\n    title: \"Gemini AI Analizi\",\n    description: \"Gemini AI video transkriptini analiz ederek konuları belirler ve gerçek hayat kariyer bağlantılarını keşfeder.\",\n    icon: Brain,\n    gradient: \"from-purple-400 to-purple-600\",\n    bgGradient: \"from-purple-50 to-purple-100\"\n  },\n  {\n    number: 3,\n    title: \"Kariyer Eşleştirme\",\n    description: \"Belirlenen konular meslek veritabanımızla eşleştirilerek potansiyel kariyer yolları belirlenir.\",\n    icon: Network,\n    gradient: \"from-green-400 to-green-600\",\n    bgGradient: \"from-green-50 to-green-100\"\n  },\n  {\n    number: 4,\n    title: \"Detaylı Rapor\",\n    description: \"Hem öğrenci hem de veli için hazırlanmış detaylı kariyer rehberi ve BTK kurs önerileri ile tamamlanmış rapor alırsın.\",\n    icon: FileText,\n    gradient: \"from-orange-400 to-orange-600\",\n    bgGradient: \"from-orange-50 to-orange-100\"\n  }\n];\n\nconst features = [\n  {\n    icon: Clock,\n    title: \"2-3 Dakika\",\n    description: \"Hızlı analiz\"\n  },\n  {\n    icon: Zap,\n    title: \"Gerçek Zamanlı\",\n    description: \"Anlık güncellemeler\"\n  },\n  {\n    icon: Target,\n    title: \"Kişiselleştirilmiş\",\n    description: \"Sana özel öneriler\"\n  },\n  {\n    icon: Sparkles,\n    title: \"AI Destekli\",\n    description: \"Gemini teknolojisi\"\n  }\n];\n\nexport default function HowItWorksSection() {\n  return (\n    <section id=\"how-it-works\" className=\"py-20 bg-gradient-to-br from-gray-50 to-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <div className=\"inline-flex items-center space-x-2 mb-4\">\n            <Target className=\"w-8 h-8 text-primary animate-pulse\" />\n            <h2 className=\"text-4xl font-bold text-text-primary\">Nasıl Çalışır?</h2>\n            <Sparkles className=\"w-8 h-8 text-warning animate-bounce\" />\n          </div>\n          <p className=\"text-xl text-text-secondary max-w-3xl mx-auto\">\n            Basit bir YouTube linki ile başlayan süreç, detaylı kariyer rehberi ile tamamlanır\n          </p>\n        </div>\n\n        {/* Process Steps */}\n        <div className=\"relative mb-16\">\n          {/* Timeline Line - Hidden on mobile */}\n          <div className=\"absolute left-1/2 transform -translate-x-1/2 w-1 h-full bg-gradient-to-b from-primary to-secondary rounded-full hidden lg:block\"></div>\n\n          <div className=\"space-y-12\">\n            {steps.map((step, index) => (\n              <div key={index} className={`flex flex-col lg:flex-row items-center ${index % 2 === 1 ? 'lg:flex-row-reverse' : ''}`}>\n                <div className={`lg:w-1/2 ${index % 2 === 1 ? 'lg:pl-12' : 'lg:pr-12'} mb-8 lg:mb-0`}>\n                  <Card className={`bg-gradient-to-br ${step.bgGradient} border-0 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105`}>\n                    <CardContent className=\"p-8\">\n                      <div className=\"flex items-center mb-6\">\n                        <div className={`w-12 h-12 bg-gradient-to-r ${step.gradient} rounded-full flex items-center justify-center text-white font-bold text-xl mr-4 shadow-lg`}>\n                          {step.number}\n                        </div>\n                        <h3 className=\"text-2xl font-bold text-text-primary\">{step.title}</h3>\n                      </div>\n                      <p className=\"text-text-secondary leading-relaxed\">\n                        {step.description}\n                      </p>\n                    </CardContent>\n                  </Card>\n                </div>\n                \n                <div className={`lg:w-1/2 ${index % 2 === 1 ? 'lg:pr-12' : 'lg:pl-12'}`}>\n                  <div className=\"relative\">\n                    <div className={`bg-gradient-to-br ${step.gradient} p-12 rounded-2xl shadow-lg transform transition-transform duration-300 hover:scale-105`}>\n                      <step.icon className=\"text-white w-16 h-16 mx-auto animate-pulse\" />\n                    </div>\n                    {/* Decorative elements */}\n                    <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-warning rounded-full animate-bounce\"></div>\n                    <div className=\"absolute -bottom-2 -left-2 w-4 h-4 bg-accent rounded-full animate-pulse\"></div>\n                  </div>\n                </div>\n\n                {/* Arrow between steps */}\n                {index < steps.length - 1 && (\n                  <div className=\"lg:hidden flex justify-center my-6\">\n                    <ArrowRight className=\"w-8 h-8 text-primary animate-bounce\" />\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"bg-white rounded-2xl shadow-lg p-8\">\n          <h3 className=\"text-2xl font-bold text-text-primary text-center mb-8\">\n            Öne Çıkan Özellikler\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"border-2 border-gray-100 hover:border-primary transition-colors duration-300\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <feature.icon className=\"text-white w-6 h-6\" />\n                  </div>\n                  <h4 className=\"font-bold text-text-primary mb-2\">{feature.title}</h4>\n                  <p className=\"text-sm text-text-secondary\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* Process Flow Visualization */}\n        <div className=\"mt-16 bg-gradient-to-r from-primary/10 via-secondary/10 to-accent/10 rounded-2xl p-8\">\n          <h3 className=\"text-xl font-bold text-text-primary text-center mb-6\">\n            7 Aşamalı Analiz Süreci\n          </h3>\n          <div className=\"flex flex-wrap justify-center gap-4\">\n            {[\n              \"Link Alımı\",\n              \"Transcript Çıkarma\", \n              \"Gemini Analizi\",\n              \"Kariyer Eşleştirme\",\n              \"BTK Önerileri\",\n              \"Öğrenci Raporu\",\n              \"Veli Rehberi\"\n            ].map((step, index) => (\n              <div key={index} className=\"flex items-center\">\n                <Badge className=\"bg-white text-text-primary border-2 border-primary/20 px-4 py-2\">\n                  {index + 1}. {step}\n                </Badge>\n                {index < 6 && (\n                  <ArrowRight className=\"w-4 h-4 text-primary mx-2\" />\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7384},"client/src/components/progress-tracker.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  Link as LinkIcon, \n  FileText, \n  Brain, \n  Network, \n  GraduationCap, \n  University, \n  Users,\n  Check,\n  Clock,\n  AlertCircle,\n  Zap\n} from \"lucide-react\";\n\ninterface ProgressStep {\n  id: number;\n  title: string;\n  description: string;\n  icon: React.ElementType;\n  status: 'pending' | 'processing' | 'completed' | 'error';\n}\n\nconst progressSteps: ProgressStep[] = [\n  {\n    id: 1,\n    title: \"Linki aldık\",\n    description: \"YouTube bağlantısı sisteme başarıyla alındı\",\n    icon: LinkIcon,\n    status: 'pending'\n  },\n  {\n    id: 2,\n    title: \"Transkript çıkarılıyor\",\n    description: \"Video içeriği metne dönüştürülüyor...\",\n    icon: FileText,\n    status: 'pending'\n  },\n  {\n    id: 3,\n    title: \"Gemini analizi yapılıyor\",\n    description: \"AI konuları ve kariyer bağlantılarını analiz ediyor\",\n    icon: Brain,\n    status: 'pending'\n  },\n  {\n    id: 4,\n    title: \"Kariyer eşleştirmesi\",\n    description: \"Konular meslek alanlarıyla ilişkilendiriliyor\",\n    icon: Network,\n    status: 'pending'\n  },\n  {\n    id: 5,\n    title: \"BTK önerileri hazırlanıyor\",\n    description: \"İlgini çekebilecek kurslar aranıyor\",\n    icon: GraduationCap,\n    status: 'pending'\n  },\n  {\n    id: 6,\n    title: \"Öğrenci raporu oluşturuluyor\",\n    description: \"Sana özel kariyer rehberi hazırlanıyor\",\n    icon: University,\n    status: 'pending'\n  },\n  {\n    id: 7,\n    title: \"Veli raporu oluşturuluyor\",\n    description: \"Aileler için destek kılavuzu oluşturuluyor\",\n    icon: Users,\n    status: 'pending'\n  }\n];\n\ninterface ProgressTrackerProps {\n  sessionId: string;\n}\n\nexport default function ProgressTracker({ sessionId }: ProgressTrackerProps) {\n  const [steps, setSteps] = useState<ProgressStep[]>(progressSteps);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isComplete, setIsComplete] = useState(false);\n\n  // WebSocket connection for real-time updates\n  const { lastMessage, connectionStatus } = useWebSocket(`/api/websocket?sessionId=${sessionId}`);\n\n  // Query for current progress state\n  const { data: progressData } = useQuery({\n    queryKey: ['/api/analysis', sessionId, 'progress'],\n    refetchInterval: 2000, // Fallback polling every 2 seconds\n    enabled: !!sessionId\n  });\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    if (lastMessage) {\n      try {\n        const message = JSON.parse(lastMessage.data);\n        \n        if (message.type === 'progress' && message.data.sessionId === sessionId) {\n          const { step, details } = message.data;\n          \n          setSteps(prevSteps => \n            prevSteps.map((stepItem, index) => {\n              if (index + 1 === step) {\n                return {\n                  ...stepItem,\n                  status: details?.status || 'processing'\n                };\n              } else if (index + 1 < step) {\n                return {\n                  ...stepItem,\n                  status: 'completed'\n                };\n              }\n              return stepItem;\n            })\n          );\n          \n          setCurrentStep(step);\n          \n          if (details?.analysisComplete) {\n            setIsComplete(true);\n          }\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    }\n  }, [lastMessage, sessionId]);\n\n  // Handle polling data\n  useEffect(() => {\n    if (progressData?.progress) {\n      const latestProgress = progressData.progress[0];\n      if (latestProgress) {\n        setCurrentStep(latestProgress.step);\n        \n        // Update steps based on latest progress\n        setSteps(prevSteps =>\n          prevSteps.map((step, index) => {\n            if (index + 1 <= latestProgress.step) {\n              return {\n                ...step,\n                status: index + 1 === latestProgress.step ? \n                  (latestProgress.details?.status || 'processing') : \n                  'completed'\n              };\n            }\n            return step;\n          })\n        );\n      }\n    }\n  }, [progressData]);\n\n  const calculateProgress = () => {\n    const completedSteps = steps.filter(step => step.status === 'completed').length;\n    return (completedSteps / steps.length) * 100;\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <Check className=\"w-5 h-5 text-white\" />;\n      case 'processing':\n        return <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />;\n      case 'error':\n        return <AlertCircle className=\"w-5 h-5 text-white\" />;\n      default:\n        return <Clock className=\"w-5 h-5 text-white opacity-60\" />;\n    }\n  };\n\n  const getStepStyle = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-50 border-green-200 shadow-green-100';\n      case 'processing':\n        return 'bg-blue-50 border-blue-200 shadow-blue-100 animate-pulse';\n      case 'error':\n        return 'bg-red-50 border-red-200 shadow-red-100';\n      default:\n        return 'bg-gray-50 border-gray-200 opacity-60';\n    }\n  };\n\n  const getIconStyle = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-success';\n      case 'processing':\n        return 'bg-primary animate-pulse';\n      case 'error':\n        return 'bg-red-500';\n      default:\n        return 'bg-gray-300';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <Card className=\"bg-white/90 backdrop-blur-sm border-0 shadow-xl\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center mb-6\">\n            <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-primary to-secondary rounded-full mb-4 animate-pulse-slow\">\n              <Brain className=\"text-white w-8 h-8\" />\n            </div>\n            <h3 className=\"text-2xl font-bold text-text-primary mb-2\">\n              Gemini AI Analiz Yapıyor\n            </h3>\n            <p className=\"text-text-secondary\">\n              Videodaki içeriği kariyer fırsatlarıyla eşleştiriyoruz\n            </p>\n            <div className=\"flex items-center justify-center mt-4 space-x-2\">\n              <Zap className=\"w-4 h-4 text-warning\" />\n              <Badge variant=\"secondary\" className=\"bg-white/80\">\n                WebSocket {connectionStatus === 'Connected' ? '🟢' : '🔴'}\n              </Badge>\n            </div>\n          </div>\n\n          {/* Progress Bar */}\n          <div className=\"mb-6\">\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-sm font-medium text-text-primary\">\n                İlerleme: {Math.round(calculateProgress())}%\n              </span>\n              <span className=\"text-sm text-text-secondary\">\n                {currentStep}/{steps.length} adım\n              </span>\n            </div>\n            <Progress \n              value={calculateProgress()} \n              className=\"h-3 bg-gray-200\"\n            />\n          </div>\n\n          {/* Completion Message */}\n          {isComplete && (\n            <div className=\"text-center bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-4 mb-6\">\n              <div className=\"text-4xl mb-2\">🎉</div>\n              <h4 className=\"text-lg font-bold text-text-primary\">\n                Analiz Tamamlandı!\n              </h4>\n              <p className=\"text-text-secondary\">\n                Raporlarınız hazır, yönlendiriliyor...\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Progress Steps */}\n      <div className=\"space-y-4\">\n        {steps.map((step, index) => (\n          <Card\n            key={step.id}\n            className={`transition-all duration-500 transform hover:scale-102 ${getStepStyle(step.status)} shadow-lg`}\n          >\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className={`flex-shrink-0 w-12 h-12 ${getIconStyle(step.status)} rounded-full flex items-center justify-center mr-4 shadow-lg`}>\n                  {getStatusIcon(step.status)}\n                </div>\n                \n                <div className=\"flex-grow\">\n                  <h4 className=\"font-semibold text-text-primary text-lg mb-1\">\n                    {step.title}\n                  </h4>\n                  <p className=\"text-text-secondary\">\n                    {step.description}\n                  </p>\n                </div>\n\n                <div className=\"flex-shrink-0 ml-4\">\n                  {step.status === 'completed' && (\n                    <Badge className=\"bg-success text-white\">\n                      <Check className=\"w-3 h-3 mr-1\" />\n                      Tamamlandı\n                    </Badge>\n                  )}\n                  {step.status === 'processing' && (\n                    <Badge className=\"bg-primary text-white animate-pulse\">\n                      <Clock className=\"w-3 h-3 mr-1\" />\n                      İşleniyor...\n                    </Badge>\n                  )}\n                  {step.status === 'error' && (\n                    <Badge className=\"bg-red-500 text-white\">\n                      <AlertCircle className=\"w-3 h-3 mr-1\" />\n                      Hata\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Time Estimate */}\n      <Card className=\"bg-blue-50 border-blue-200\">\n        <CardContent className=\"p-4 text-center\">\n          <Clock className=\"w-5 h-5 text-blue-600 mx-auto mb-2\" />\n          <p className=\"text-sm text-blue-800 font-medium\">\n            Ortalama analiz süresi: 2-3 dakika\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10136},"client/src/components/report-viewer.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  BookOpen, \n  Target, \n  TrendingUp, \n  Users, \n  Heart,\n  University,\n  Building,\n  Lightbulb,\n  CheckCircle,\n  ArrowRight,\n  Star,\n  Trophy,\n  Clock,\n  Download,\n  Share2\n} from \"lucide-react\";\n\ninterface ReportViewerProps {\n  report: any;\n  type: 'student' | 'parent';\n}\n\nexport default function ReportViewer({ report, type }: ReportViewerProps) {\n  const [expandedSections, setExpandedSections] = useState<string[]>([]);\n\n  const toggleSection = (sectionId: string) => {\n    setExpandedSections(prev => \n      prev.includes(sectionId) \n        ? prev.filter(id => id !== sectionId)\n        : [...prev, sectionId]\n    );\n  };\n\n  if (!report || !report.content) {\n    return (\n      <Card className=\"bg-gradient-to-r from-gray-50 to-gray-100\">\n        <CardContent className=\"p-8 text-center\">\n          <div className=\"text-4xl mb-4\">📄</div>\n          <h3 className=\"text-xl font-bold text-text-primary mb-2\">\n            Rapor Hazırlanıyor\n          </h3>\n          <p className=\"text-text-secondary\">\n            {type === 'student' ? 'Öğrenci raporu' : 'Veli rehberi'} henüz hazır değil...\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (type === 'student') {\n    return (\n      <div className=\"space-y-6\">\n        {/* Report Header */}\n        <Card className=\"bg-gradient-to-r from-blue-500 to-purple-600 text-white\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"text-2xl font-bold mb-2\">\n                  Kişisel Kariyer Rehberin\n                </h3>\n                <p className=\"opacity-90\">\n                  Video: {report.videoTopic}\n                </p>\n              </div>\n              <div className=\"text-right\">\n                <Trophy className=\"w-12 h-12 opacity-80 mb-2\" />\n                <p className=\"text-sm opacity-80\">\n                  AI Destekli Analiz\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Main Topics */}\n        {report.mainTopics && (\n          <Card className=\"border-l-4 border-l-blue-500\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <BookOpen className=\"mr-2 w-5 h-5 text-blue-500\" />\n                Tespit Edilen Ana Konular\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-wrap gap-2\">\n                {report.mainTopics.map((topic: string, index: number) => (\n                  <Badge key={index} variant=\"secondary\" className=\"bg-blue-100 text-blue-800 px-3 py-1\">\n                    <Star className=\"w-3 h-3 mr-1\" />\n                    {topic}\n                  </Badge>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Career Areas */}\n        {report.careerAreas && (\n          <Card className=\"border-l-4 border-l-green-500\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Target className=\"mr-2 w-5 h-5 text-green-500\" />\n                Önerilen Kariyer Alanları\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {report.careerAreas.map((career: any, index: number) => (\n                <Card key={index} className=\"bg-gray-50 hover:bg-white transition-colors\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <h4 className=\"font-bold text-text-primary text-lg\">\n                        {career.career}\n                      </h4>\n                      <Badge className=\"bg-green-500 text-white\">\n                        %{career.matchScore} uyum\n                      </Badge>\n                    </div>\n                    <p className=\"text-text-secondary mb-3\">\n                      {career.reasoning}\n                    </p>\n                    \n                    {career.requiredSkills && (\n                      <div className=\"space-y-2\">\n                        <h5 className=\"font-semibold text-text-primary flex items-center\">\n                          <CheckCircle className=\"w-4 h-4 mr-1 text-green-500\" />\n                          Gerekli Beceriler:\n                        </h5>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {career.requiredSkills.map((skill: string, i: number) => (\n                            <Badge key={i} variant=\"outline\" className=\"text-xs\">\n                              {skill}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                    \n                    {career.companies && (\n                      <div className=\"mt-3 pt-3 border-t\">\n                        <h5 className=\"font-semibold text-text-primary flex items-center text-sm\">\n                          <Building className=\"w-4 h-4 mr-1 text-blue-500\" />\n                          Örnek Şirketler:\n                        </h5>\n                        <p className=\"text-sm text-text-secondary\">\n                          {career.companies.join(\", \")}\n                        </p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Recommended Courses */}\n        {report.recommendedCourses && (\n          <Card className=\"border-l-4 border-l-purple-500\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <BookOpen className=\"mr-2 w-5 h-5 text-purple-500\" />\n                BTK Akademi Kurs Önerileri\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {report.recommendedCourses.map((course: any, index: number) => (\n                <Card key={index} className=\"bg-purple-50 hover:bg-white transition-colors\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-bold text-text-primary\">\n                        {course.title}\n                      </h4>\n                      <Badge variant=\"outline\">{course.level}</Badge>\n                    </div>\n                    <p className=\"text-sm text-text-secondary mb-3\">\n                      {course.description}\n                    </p>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center text-sm text-text-secondary\">\n                        <Clock className=\"w-4 h-4 mr-1\" />\n                        {course.duration}\n                      </div>\n                      {course.url && (\n                        <Button size=\"sm\" variant=\"outline\" asChild>\n                          <a href={course.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                            Kursa Git <ArrowRight className=\"w-3 h-3 ml-1\" />\n                          </a>\n                        </Button>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Detailed Content */}\n        <Card className=\"border-l-4 border-l-orange-500\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Lightbulb className=\"mr-2 w-5 h-5 text-orange-500\" />\n              Detaylı Kariyer Rehberi\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ScrollArea className=\"h-96 w-full rounded border p-4 bg-gray-50\">\n              <div className=\"prose prose-sm max-w-none\">\n                <div className=\"whitespace-pre-wrap text-text-primary leading-relaxed\">\n                  {report.content}\n                </div>\n              </div>\n            </ScrollArea>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Parent Report\n  return (\n    <div className=\"space-y-6\">\n      {/* Report Header */}\n      <Card className=\"bg-gradient-to-r from-purple-500 to-pink-600 text-white\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-2xl font-bold mb-2\">\n                Veli Destek Kılavuzu\n              </h3>\n              <p className=\"opacity-90\">\n                Çocuğunuzun kariyer gelişimi için rehber\n              </p>\n            </div>\n            <div className=\"text-right\">\n              <Users className=\"w-12 h-12 opacity-80 mb-2\" />\n              <p className=\"text-sm opacity-80\">\n                Aile Desteği\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Child's Interests */}\n      {report.childInterests && (\n        <Card className=\"border-l-4 border-l-pink-500\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Heart className=\"mr-2 w-5 h-5 text-pink-500\" />\n              Çocuğunuzun İlgi Alanları\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-wrap gap-2\">\n              {report.childInterests.map((interest: string, index: number) => (\n                <Badge key={index} variant=\"secondary\" className=\"bg-pink-100 text-pink-800 px-3 py-1\">\n                  <Heart className=\"w-3 h-3 mr-1\" />\n                  {interest}\n                </Badge>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Support Suggestions */}\n      <Card className=\"border-l-4 border-l-blue-500\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Users className=\"mr-2 w-5 h-5 text-blue-500\" />\n            Destek Önerileri\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-semibold text-text-primary mb-3 flex items-center\">\n                <Building className=\"mr-2 w-4 h-4\" />\n                Pratik Aktiviteler\n              </h4>\n              <ul className=\"space-y-2 text-sm text-text-secondary\">\n                <li className=\"flex items-start\">\n                  <CheckCircle className=\"w-4 h-4 text-green-500 mr-2 mt-0.5\" />\n                  Doğa yürüyüşleri ve gözlemler yapın\n                </li>\n                <li className=\"flex items-start\">\n                  <CheckCircle className=\"w-4 h-4 text-green-500 mr-2 mt-0.5\" />\n                  Bilim müzelerini ziyaret edin\n                </li>\n                <li className=\"flex items-start\">\n                  <CheckCircle className=\"w-4 h-4 text-green-500 mr-2 mt-0.5\" />\n                  Online kursları birlikte takip edin\n                </li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold text-text-primary mb-3 flex items-center\">\n                <University className=\"mr-2 w-4 h-4\" />\n                Eğitim Desteği\n              </h4>\n              <ul className=\"space-y-2 text-sm text-text-secondary\">\n                <li className=\"flex items-start\">\n                  <CheckCircle className=\"w-4 h-4 text-green-500 mr-2 mt-0.5\" />\n                  STEM kulüplerine katılımı destekleyin\n                </li>\n                <li className=\"flex items-start\">\n                  <CheckCircle className=\"w-4 h-4 text-green-500 mr-2 mt-0.5\" />\n                  Bilim yarışmalarına teşvik edin\n                </li>\n                <li className=\"flex items-start\">\n                  <CheckCircle className=\"w-4 h-4 text-green-500 mr-2 mt-0.5\" />\n                  Kitap okuma alışkanlığı kazandırın\n                </li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Detailed Parent Guide */}\n      <Card className=\"border-l-4 border-l-green-500\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Lightbulb className=\"mr-2 w-5 h-5 text-green-500\" />\n            Detaylı Veli Rehberi\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ScrollArea className=\"h-96 w-full rounded border p-4 bg-gray-50\">\n            <div className=\"prose prose-sm max-w-none\">\n              <div className=\"whitespace-pre-wrap text-text-primary leading-relaxed\">\n                {report.content}\n              </div>\n            </div>\n          </ScrollArea>\n        </CardContent>\n      </Card>\n\n      {/* Action Items */}\n      <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 border-green-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-green-700\">\n            <TrendingUp className=\"mr-2 w-5 h-5\" />\n            Hemen Yapabilecekleriniz\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n              <h5 className=\"font-semibold text-text-primary mb-2\">Bu Hafta</h5>\n              <ul className=\"text-sm text-text-secondary space-y-1\">\n                <li>• Çocuğunuzla ilgi alanlarını konuşun</li>\n                <li>• BTK Akademi kurslarına göz atın</li>\n                <li>• Yerel bilim merkezlerini araştırın</li>\n              </ul>\n            </div>\n            <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n              <h5 className=\"font-semibold text-text-primary mb-2\">Bu Ay</h5>\n              <ul className=\"text-sm text-text-secondary space-y-1\">\n                <li>• Önerilen üniversite bölümlerini inceleyin</li>\n                <li>• Sektör uzmanları ile buluşma ayarlayın</li>\n                <li>• Proje tabanlı aktiviteler planlayın</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":14569},"client/src/hooks/use-analysis.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { AnalysisSession } from \"@shared/schema\";\n\nexport function useAnalysis(sessionId: string) {\n  return useQuery<AnalysisSession>({\n    queryKey: ['/api/analysis', sessionId, 'status'],\n    enabled: !!sessionId,\n    refetchInterval: (data) => {\n      // Stop refetching when analysis is completed or failed\n      if (data?.status === 'completed' || data?.status === 'failed') {\n        return false;\n      }\n      // Refetch every 2 seconds while analysis is in progress\n      return 2000;\n    },\n    staleTime: 0, // Always consider data stale to ensure fresh updates\n  });\n}\n\nexport function useAnalysisResults(sessionId: string) {\n  return useQuery({\n    queryKey: ['/api/analysis', sessionId, 'results'],\n    enabled: !!sessionId,\n    retry: false, // Don't retry if results aren't ready yet\n  });\n}\n\nexport function useStudentReport(sessionId: string) {\n  return useQuery({\n    queryKey: ['/api/analysis', sessionId, 'student-report'],\n    enabled: !!sessionId,\n    retry: false,\n  });\n}\n\nexport function useParentReport(sessionId: string) {\n  return useQuery({\n    queryKey: ['/api/analysis', sessionId, 'parent-report'],\n    enabled: !!sessionId,\n    retry: false,\n  });\n}\n","size_bytes":1235},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { WebSocketClient } from '@/lib/websocket';\n\ninterface UseWebSocketOptions {\n  reconnect?: boolean;\n  reconnectAttempts?: number;\n  reconnectInterval?: number;\n}\n\ninterface UseWebSocketReturn {\n  socket: WebSocketClient | null;\n  lastMessage: MessageEvent | null;\n  connectionStatus: 'Connecting' | 'Connected' | 'Disconnected' | 'Error';\n  sendMessage: (message: any) => void;\n}\n\nexport function useWebSocket(url?: string, options: UseWebSocketOptions = {}): UseWebSocketReturn {\n  const {\n    reconnect = true,\n    reconnectAttempts = 5,\n    reconnectInterval = 3000\n  } = options;\n\n  const [socket, setSocket] = useState<WebSocketClient | null>(null);\n  const [lastMessage, setLastMessage] = useState<MessageEvent | null>(null);\n  const [connectionStatus, setConnectionStatus] = useState<'Connecting' | 'Connected' | 'Disconnected' | 'Error'>('Disconnected');\n  \n  const reconnectAttemptsRef = useRef(0);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const shouldReconnectRef = useRef(reconnect);\n\n  useEffect(() => {\n    if (!url) return;\n\n    const connectWebSocket = () => {\n      try {\n        setConnectionStatus('Connecting');\n        \n        const ws = new WebSocketClient(url);\n        \n        ws.onOpen(() => {\n          setConnectionStatus('Connected');\n          reconnectAttemptsRef.current = 0;\n          setSocket(ws);\n        });\n\n        ws.onMessage((event) => {\n          setLastMessage(event);\n        });\n\n        ws.onClose(() => {\n          setConnectionStatus('Disconnected');\n          setSocket(null);\n          \n          // Attempt reconnection if enabled\n          if (shouldReconnectRef.current && reconnectAttemptsRef.current < reconnectAttempts) {\n            reconnectAttemptsRef.current++;\n            reconnectTimeoutRef.current = setTimeout(() => {\n              connectWebSocket();\n            }, reconnectInterval);\n          }\n        });\n\n        ws.onError((error) => {\n          console.error('WebSocket error:', error);\n          setConnectionStatus('Error');\n        });\n\n        return ws;\n      } catch (error) {\n        console.error('Failed to create WebSocket connection:', error);\n        setConnectionStatus('Error');\n        return null;\n      }\n    };\n\n    const websocket = connectWebSocket();\n\n    return () => {\n      shouldReconnectRef.current = false;\n      \n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      \n      if (websocket) {\n        websocket.close();\n      }\n    };\n  }, [url, reconnectAttempts, reconnectInterval]);\n\n  const sendMessage = (message: any) => {\n    if (socket && connectionStatus === 'Connected') {\n      socket.send(message);\n    } else {\n      console.warn('WebSocket is not connected. Message not sent:', message);\n    }\n  };\n\n  return {\n    socket,\n    lastMessage,\n    connectionStatus,\n    sendMessage\n  };\n}\n","size_bytes":2940},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/websocket.ts":{"content":"export interface WebSocketMessage {\n  type: string;\n  data: any;\n  sessionId?: string;\n}\n\nexport class WebSocketClient {\n  private ws: WebSocket | null = null;\n  private url: string;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectInterval = 3000;\n  private isReconnecting = false;\n\n  // Event handlers\n  private onOpenHandler?: () => void;\n  private onMessageHandler?: (event: MessageEvent) => void;\n  private onCloseHandler?: () => void;\n  private onErrorHandler?: (event: Event) => void;\n\n  constructor(url: string) {\n    this.url = this.normalizeUrl(url);\n    this.connect();\n  }\n\n  private normalizeUrl(url: string): string {\n    // Convert HTTP URLs to WebSocket URLs\n    if (url.startsWith('http://')) {\n      return url.replace('http://', 'ws://');\n    } else if (url.startsWith('https://')) {\n      return url.replace('https://', 'wss://');\n    }\n    \n    // If it's a relative URL, construct the full WebSocket URL\n    if (url.startsWith('/')) {\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      return `${protocol}//${window.location.host}${url}`;\n    }\n    \n    return url;\n  }\n\n  private connect(): void {\n    try {\n      this.ws = new WebSocket(this.url);\n      \n      this.ws.onopen = () => {\n        console.log('WebSocket connected to:', this.url);\n        this.reconnectAttempts = 0;\n        this.isReconnecting = false;\n        this.onOpenHandler?.();\n      };\n\n      this.ws.onmessage = (event) => {\n        this.onMessageHandler?.(event);\n      };\n\n      this.ws.onclose = (event) => {\n        console.log('WebSocket disconnected:', event.code, event.reason);\n        this.ws = null;\n        this.onCloseHandler?.();\n        \n        // Attempt to reconnect if not manually closed\n        if (!this.isReconnecting && this.reconnectAttempts < this.maxReconnectAttempts) {\n          this.attemptReconnect();\n        }\n      };\n\n      this.ws.onerror = (event) => {\n        console.error('WebSocket error:', event);\n        this.onErrorHandler?.(event);\n      };\n\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n      this.onErrorHandler?.(error as Event);\n    }\n  }\n\n  private attemptReconnect(): void {\n    if (this.isReconnecting) return;\n    \n    this.isReconnecting = true;\n    this.reconnectAttempts++;\n    \n    console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n    \n    setTimeout(() => {\n      this.connect();\n    }, this.reconnectInterval);\n  }\n\n  public send(message: WebSocketMessage): void {\n    if (this.ws?.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected. Message not sent:', message);\n    }\n  }\n\n  public close(): void {\n    this.isReconnecting = false;\n    this.reconnectAttempts = this.maxReconnectAttempts; // Prevent reconnection\n    \n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  public getReadyState(): number {\n    return this.ws?.readyState ?? WebSocket.CLOSED;\n  }\n\n  public isConnected(): boolean {\n    return this.ws?.readyState === WebSocket.OPEN;\n  }\n\n  // Event handler setters\n  public onOpen(handler: () => void): void {\n    this.onOpenHandler = handler;\n  }\n\n  public onMessage(handler: (event: MessageEvent) => void): void {\n    this.onMessageHandler = handler;\n  }\n\n  public onClose(handler: () => void): void {\n    this.onCloseHandler = handler;\n  }\n\n  public onError(handler: (event: Event) => void): void {\n    this.onErrorHandler = handler;\n  }\n\n  // Subscribe to a specific session\n  public subscribeToSession(sessionId: string): void {\n    this.send({\n      type: 'subscribe',\n      sessionId,\n      data: { action: 'subscribe' }\n    });\n  }\n\n  // Send a ping to keep connection alive\n  public ping(): void {\n    this.send({\n      type: 'ping',\n      data: { timestamp: Date.now() }\n    });\n  }\n}\n\n// Utility function to create WebSocket connection\nexport function createWebSocketConnection(url: string): WebSocketClient {\n  return new WebSocketClient(url);\n}\n\n// Export WebSocket ready states for convenience\nexport const WebSocketReadyState = {\n  CONNECTING: 0,\n  OPEN: 1,\n  CLOSING: 2,\n  CLOSED: 3\n} as const;\n","size_bytes":4261},"client/src/pages/analysis.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport ProgressTracker from \"@/components/progress-tracker\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Compass, ArrowLeft, Home } from \"lucide-react\";\nimport { useAnalysis } from \"@/hooks/use-analysis\";\nimport { Link } from \"wouter\";\n\nexport default function Analysis() {\n  const { sessionId } = useParams<{ sessionId: string }>();\n  const [, setLocation] = useLocation();\n  \n  const { data: session, isLoading, error } = useAnalysis(sessionId!);\n\n  useEffect(() => {\n    if (session?.status === \"completed\") {\n      // Redirect to reports when analysis is complete\n      setTimeout(() => {\n        setLocation(`/reports/${sessionId}`);\n      }, 3000);\n    }\n  }, [session?.status, sessionId, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n            <p className=\"text-text-secondary\">Analiz bilgileri yükleniyor...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"text-red-500 text-xl mb-4\">⚠️</div>\n            <h2 className=\"text-xl font-bold text-text-primary mb-2\">Bir Hata Oluştu</h2>\n            <p className=\"text-text-secondary mb-4\">Analiz bilgileri yüklenemedi.</p>\n            <Link href=\"/\">\n              <Button>\n                <Home className=\"mr-2 w-4 h-4\" />Ana Sayfaya Dön\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!session) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-8 text-center\">\n            <h2 className=\"text-xl font-bold text-text-primary mb-2\">Analiz Bulunamadı</h2>\n            <p className=\"text-text-secondary mb-4\">Bu analiz oturumu mevcut değil.</p>\n            <Link href=\"/\">\n              <Button>\n                <Home className=\"mr-2 w-4 h-4\" />Ana Sayfaya Dön\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-green-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-100\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"bg-gradient-to-r from-primary to-secondary p-2 rounded-lg\">\n                <Compass className=\"text-white w-5 h-5\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-text-primary\">PusulaAI</h1>\n                <p className=\"text-xs text-text-secondary\">Analiz İşleniyor</p>\n              </div>\n            </div>\n            <Link href=\"/\">\n              <Button variant=\"outline\" size=\"sm\">\n                <ArrowLeft className=\"mr-2 w-4 h-4\" />Ana Sayfa\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"text-center mb-8\">\n          <h2 className=\"text-3xl font-bold text-text-primary mb-2\">\n            Video Analiziniz İşleniyor\n          </h2>\n          <p className=\"text-xl text-text-secondary\">\n            Gemini AI ile kariyer bağlantıları keşfediliyor...\n          </p>\n          {session.videoTitle && (\n            <Card className=\"mt-4 bg-white/80 backdrop-blur-sm\">\n              <CardContent className=\"p-4\">\n                <p className=\"text-sm text-text-secondary mb-1\">Analiz Edilen Video:</p>\n                <h3 className=\"font-semibold text-text-primary\">{session.videoTitle}</h3>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Progress Tracker */}\n        <ProgressTracker sessionId={sessionId!} />\n\n        {/* Analysis completed message */}\n        {session.status === \"completed\" && (\n          <Card className=\"mt-8 bg-gradient-to-r from-green-50 to-blue-50 border-green-200\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"text-4xl mb-4\">🎉</div>\n              <h3 className=\"text-2xl font-bold text-text-primary mb-2\">\n                Analiz Tamamlandı!\n              </h3>\n              <p className=\"text-text-secondary mb-4\">\n                Kariyer raporlarınız hazır. Yönlendiriliyor...\n              </p>\n              <div className=\"animate-pulse\">\n                <div className=\"flex justify-center\">\n                  <div className=\"w-6 h-6 bg-primary rounded-full animate-bounce\"></div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Error state */}\n        {session.status === \"failed\" && (\n          <Card className=\"mt-8 bg-red-50 border-red-200\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"text-4xl mb-4 text-red-500\">⚠️</div>\n              <h3 className=\"text-2xl font-bold text-text-primary mb-2\">\n                Analiz Başarısız\n              </h3>\n              <p className=\"text-text-secondary mb-4\">\n                Bir hata oluştu. Lütfen tekrar deneyiniz.\n              </p>\n              <Link href=\"/\">\n                <Button>\n                  <Home className=\"mr-2 w-4 h-4\" />Ana Sayfaya Dön\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6112},"client/src/pages/home.tsx":{"content":"import HeroSection from \"@/components/hero-section\";\nimport FeaturesSection from \"@/components/features-section\";\nimport HowItWorksSection from \"@/components/how-it-works-section\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Brain, \n  Network, \n  GraduationCap, \n  School, \n  Users, \n  MemoryStick,\n  Heart,\n  University,\n  Download,\n  Info,\n  Rocket,\n  Twitter,\n  Linkedin,\n  Github,\n  Compass\n} from \"lucide-react\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-surface\">\n      {/* Header Navigation */}\n      <header className=\"bg-white shadow-sm border-b border-gray-100 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"bg-gradient-to-r from-primary to-secondary p-2 rounded-lg\">\n                <Compass className=\"text-white w-5 h-5\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-text-primary\">PusulaAI</h1>\n                <p className=\"text-xs text-text-secondary\">Eğitimde Gerçek Hayat Bağlantısı</p>\n              </div>\n            </div>\n            <nav className=\"hidden md:flex items-center space-x-8\">\n              <a href=\"#features\" className=\"text-text-secondary hover:text-primary transition-colors font-medium\">Özellikler</a>\n              <a href=\"#how-it-works\" className=\"text-text-secondary hover:text-primary transition-colors font-medium\">Nasıl Çalışır</a>\n              <a href=\"#contact\" className=\"text-text-secondary hover:text-primary transition-colors font-medium\">İletişim</a>\n              <Button className=\"bg-primary text-white hover:bg-blue-700 transition-all font-medium\">\n                Başla\n              </Button>\n            </nav>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <HeroSection />\n\n      {/* Features Section */}\n      <FeaturesSection />\n\n      {/* How It Works Section */}\n      <HowItWorksSection />\n\n      {/* Sample Reports Section */}\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-text-primary mb-4\">Örnek Raporlar</h2>\n            <p className=\"text-xl text-text-secondary max-w-3xl mx-auto\">\n              PusulaAI'nin ürettiği raporların örneklerini incele\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Student Report Preview */}\n            <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 shadow-lg hover:shadow-xl transition-all\">\n              <CardContent className=\"p-8\">\n                <div className=\"flex items-center mb-6\">\n                  <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center mr-4\">\n                    <School className=\"text-white w-6 h-6\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-text-primary\">Öğrenci Raporu</h3>\n                </div>\n                \n                <Card className=\"bg-white shadow-inner mb-6\">\n                  <CardContent className=\"p-6\">\n                    <h4 className=\"font-bold text-text-primary mb-3\">Video Konusu: Yeryüzündeki Su Kaynakları</h4>\n                    <div className=\"space-y-3 text-sm text-text-secondary\">\n                      <div><strong>Ana Konular:</strong> Hidrolojik döngü, yeraltı suları, buzullar</div>\n                      <div><strong>Kariyer Alanları:</strong> Hidrolog, CBS Uzmanı, İklim Analisti</div>\n                      <div><strong>Türkiye İş Pazarı:</strong> <Badge className=\"bg-success text-white\">Yüksek talep</Badge></div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <div className=\"space-y-4\">\n                  <Card className=\"bg-white\">\n                    <CardContent className=\"p-4\">\n                      <h5 className=\"font-semibold text-text-primary mb-2 flex items-center\">\n                        <GraduationCap className=\"mr-2 w-4 h-4 text-primary\" />BTK Kurs Önerileri:\n                      </h5>\n                      <ul className=\"text-sm text-text-secondary space-y-1\">\n                        <li>• Veri Bilimi için Python</li>\n                        <li>• Coğrafi Bilgi Sistemleri</li>\n                        <li>• İklim Veri Analizi</li>\n                      </ul>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card className=\"bg-white\">\n                    <CardContent className=\"p-4\">\n                      <h5 className=\"font-semibold text-text-primary mb-2 flex items-center\">\n                        <Network className=\"mr-2 w-4 h-4 text-accent\" />Kariyer Yol Haritası:\n                      </h5>\n                      <div className=\"text-sm text-text-secondary\">\n                        Lise → Çevre/Jeoloji Mühendisliği → CBS Sertifikası → Staj (DSİ) → Kariyer\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Parent Report Preview */}\n            <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 shadow-lg hover:shadow-xl transition-all\">\n              <CardContent className=\"p-8\">\n                <div className=\"flex items-center mb-6\">\n                  <div className=\"w-12 h-12 bg-secondary rounded-lg flex items-center justify-center mr-4\">\n                    <Users className=\"text-white w-6 h-6\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-text-primary\">Veli Rehberi</h3>\n                </div>\n                \n                <Card className=\"bg-white shadow-inner mb-6\">\n                  <CardContent className=\"p-6\">\n                    <h4 className=\"font-bold text-text-primary mb-3\">Çocuğunuzun İlgi Alanı: Su Kaynakları</h4>\n                    <p className=\"text-sm text-text-secondary\">\n                      Çocuğunuz çevre ve doğa konularında güçlü bir ilgi gösteriyor. \n                      Bu alanda Türkiye'de yüksek iş imkanı bulunmaktadır.\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <div className=\"space-y-4\">\n                  <Card className=\"bg-white\">\n                    <CardContent className=\"p-4\">\n                      <h5 className=\"font-semibold text-text-primary mb-2 flex items-center\">\n                        <Heart className=\"mr-2 w-4 h-4 text-pink-500\" />Nasıl Destekleyebilirsiniz:\n                      </h5>\n                      <ul className=\"text-sm text-text-secondary space-y-1\">\n                        <li>• Doğa yürüyüşleri ve gözlemler yapın</li>\n                        <li>• Bilim müzelerini ziyaret edin</li>\n                        <li>• Online kursları birlikte takip edin</li>\n                      </ul>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card className=\"bg-white\">\n                    <CardContent className=\"p-4\">\n                      <h5 className=\"font-semibold text-text-primary mb-2 flex items-center\">\n                        <University className=\"mr-2 w-4 h-4 text-secondary\" />Üniversite Bölümleri:\n                      </h5>\n                      <div className=\"text-sm text-text-secondary\">\n                        Çevre Mühendisliği, Jeoloji Mühendisliği, Coğrafya, Meteoroloji Mühendisliği\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <Button className=\"bg-gradient-to-r from-primary to-secondary text-white px-8 py-4 text-lg font-semibold hover:shadow-lg transition-all transform hover:scale-105\">\n              <Download className=\"mr-2 w-5 h-5\" />Tam Raporları İncele\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-br from-primary via-secondary to-accent text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n            Eğitimde yönünü kaybedenlerden olma\n          </h2>\n          <p className=\"text-xl mb-8 opacity-90 max-w-3xl mx-auto\">\n            Akademik bilgilerini gerçek kariyer fırsatlarına dönüştürmeye bugün başla. \n            Geleceğin mesleklerinde yerini al.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-6 justify-center items-center\">\n            <Button className=\"bg-white text-primary px-8 py-4 text-lg font-bold hover:shadow-lg transition-all transform hover:scale-105\">\n              <Rocket className=\"mr-2 w-5 h-5\" />Hemen Başla\n            </Button>\n            <Button variant=\"outline\" className=\"border-2 border-white text-white px-8 py-4 text-lg font-bold hover:bg-white hover:text-primary transition-all\">\n              <Info className=\"mr-2 w-5 h-5\" />Daha Fazla Bilgi\n            </Button>\n          </div>\n\n          <div className=\"mt-12 grid grid-cols-1 md:grid-cols-3 gap-8 text-center\">\n            <Card className=\"bg-white/10 backdrop-blur-sm border-white/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-3xl font-bold mb-2\">2-3dk</div>\n                <div className=\"text-sm opacity-80\">Ortalama analiz süresi</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-white/10 backdrop-blur-sm border-white/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-3xl font-bold mb-2\">50+</div>\n                <div className=\"text-sm opacity-80\">Farklı kariyer alanı</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-white/10 backdrop-blur-sm border-white/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-3xl font-bold mb-2\">BTK</div>\n                <div className=\"text-sm opacity-80\">Akademi entegrasyonu</div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer id=\"contact\" className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            <div className=\"col-span-2\">\n              <div className=\"flex items-center space-x-4 mb-6\">\n                <div className=\"bg-gradient-to-r from-primary to-secondary p-2 rounded-lg\">\n                  <Compass className=\"text-white w-5 h-5\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-bold\">PusulaAI</h3>\n                  <p className=\"text-gray-400 text-sm\">Eğitimde Gerçek Hayat Bağlantısı</p>\n                </div>\n              </div>\n              <p className=\"text-gray-300 mb-4 leading-relaxed\">\n                Akademik öğrenmelerinizi gerçek kariyer fırsatlarıyla buluşturan \n                AI destekli eğitim platformu. Gemini AI teknolojisi ile \n                geleceğinizi şekillendirin.\n              </p>\n              <div className=\"flex space-x-4\">\n                <Button size=\"sm\" className=\"bg-primary hover:bg-blue-700\">\n                  <Twitter className=\"w-4 h-4\" />\n                </Button>\n                <Button size=\"sm\" className=\"bg-primary hover:bg-blue-700\">\n                  <Linkedin className=\"w-4 h-4\" />\n                </Button>\n                <Button size=\"sm\" className=\"bg-primary hover:bg-blue-700\">\n                  <Github className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Platform</h4>\n              <ul className=\"space-y-2 text-gray-300\">\n                <li><a href=\"#features\" className=\"hover:text-primary transition-colors\">Özellikler</a></li>\n                <li><a href=\"#how-it-works\" className=\"hover:text-primary transition-colors\">Nasıl Çalışır</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Fiyatlandırma</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">API</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold mb-4\">Destek</h4>\n              <ul className=\"space-y-2 text-gray-300\">\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Yardım Merkezi</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">İletişim</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Gizlilik</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Kullanım Şartları</a></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-gray-400\">\n            <p>&copy; 2024 PusulaAI. Tüm hakları saklıdır. BTK Akademi ile entegreli.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":13705},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport ReportViewer from \"@/components/report-viewer\";\nimport { \n  Compass, \n  ArrowLeft, \n  Download, \n  Share2,\n  School,\n  Users,\n  GraduationCap,\n  Network,\n  Target,\n  BookOpen,\n  TrendingUp,\n  Clock,\n  Building,\n  Heart,\n  University\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface AnalysisResults {\n  videoTitle: string;\n  geminiAnalysis: any;\n  careerMatches: any[];\n  btkRecommendations: any[];\n  studentReport: any;\n  parentReport: any;\n  completedAt: string;\n}\n\nexport default function Reports() {\n  const { sessionId } = useParams<{ sessionId: string }>();\n  const [activeTab, setActiveTab] = useState(\"student\");\n\n  const { data: results, isLoading, error } = useQuery<AnalysisResults>({\n    queryKey: [\"/api/analysis\", sessionId, \"results\"],\n    enabled: !!sessionId,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n            <p className=\"text-text-secondary\">Raporlar yükleniyor...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error || !results) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"text-red-500 text-xl mb-4\">⚠️</div>\n            <h2 className=\"text-xl font-bold text-text-primary mb-2\">Raporlar Bulunamadı</h2>\n            <p className=\"text-text-secondary mb-4\">Bu analiz için raporlar henüz hazır değil.</p>\n            <Link href=\"/\">\n              <Button>Ana Sayfaya Dön</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-green-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-100 sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"bg-gradient-to-r from-primary to-secondary p-2 rounded-lg\">\n                <Compass className=\"text-white w-5 h-5\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-text-primary\">PusulaAI</h1>\n                <p className=\"text-xs text-text-secondary\">Kariyer Raporları</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"outline\" size=\"sm\">\n                <Share2 className=\"mr-2 w-4 h-4\" />Paylaş\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <Download className=\"mr-2 w-4 h-4\" />İndir\n              </Button>\n              <Link href=\"/\">\n                <Button variant=\"outline\" size=\"sm\">\n                  <ArrowLeft className=\"mr-2 w-4 h-4\" />Ana Sayfa\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Video Info */}\n        <Card className=\"mb-8 bg-white/80 backdrop-blur-sm\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-bold text-text-primary mb-2\">\n                  {results.videoTitle}\n                </h2>\n                <p className=\"text-text-secondary\">\n                  Analiz Tamamlandı: {new Date(results.completedAt).toLocaleString(\"tr-TR\")}\n                </p>\n              </div>\n              <Badge className=\"bg-success text-white\">Tamamlandı</Badge>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Analysis Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-br from-blue-100 to-blue-200\">\n            <CardContent className=\"p-6 text-center\">\n              <BookOpen className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-text-primary\">\n                {results.geminiAnalysis?.mainTopics?.length || 0}\n              </div>\n              <div className=\"text-sm text-text-secondary\">Ana Konu</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-gradient-to-br from-purple-100 to-purple-200\">\n            <CardContent className=\"p-6 text-center\">\n              <Target className=\"w-8 h-8 text-secondary mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-text-primary\">\n                {results.careerMatches?.length || 0}\n              </div>\n              <div className=\"text-sm text-text-secondary\">Kariyer Önerisi</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-gradient-to-br from-green-100 to-green-200\">\n            <CardContent className=\"p-6 text-center\">\n              <GraduationCap className=\"w-8 h-8 text-accent mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-text-primary\">\n                {results.btkRecommendations?.length || 0}\n              </div>\n              <div className=\"text-sm text-text-secondary\">BTK Kursu</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-gradient-to-br from-orange-100 to-orange-200\">\n            <CardContent className=\"p-6 text-center\">\n              <TrendingUp className=\"w-8 h-8 text-warning mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-text-primary\">\n                {results.geminiAnalysis?.turkeyJobMarketFit || \"Belirleniyor\"}\n              </div>\n              <div className=\"text-sm text-text-secondary\">İş Pazarı Uyumu</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Reports Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2 max-w-md mx-auto\">\n            <TabsTrigger value=\"student\" className=\"flex items-center space-x-2\">\n              <School className=\"w-4 h-4\" />\n              <span>Öğrenci Raporu</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"parent\" className=\"flex items-center space-x-2\">\n              <Users className=\"w-4 h-4\" />\n              <span>Veli Rehberi</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"student\" className=\"space-y-6\">\n            <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                    <School className=\"text-white w-5 h-5\" />\n                  </div>\n                  <span>Kişiselleştirilmiş Kariyer Rehberin</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Main Topics */}\n                <div>\n                  <h3 className=\"text-lg font-semibold text-text-primary mb-3 flex items-center\">\n                    <BookOpen className=\"mr-2 w-5 h-5\" />Tespit Edilen Ana Konular\n                  </h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {results.geminiAnalysis?.mainTopics?.map((topic: string, index: number) => (\n                      <Badge key={index} variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n                        {topic}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Career Matches */}\n                <div>\n                  <h3 className=\"text-lg font-semibold text-text-primary mb-4 flex items-center\">\n                    <Target className=\"mr-2 w-5 h-5\" />Önerilen Kariyer Alanları\n                  </h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {results.careerMatches?.slice(0, 4).map((career: any, index: number) => (\n                      <Card key={index} className=\"bg-white\">\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <h4 className=\"font-semibold text-text-primary\">{career.career}</h4>\n                            <Badge className=\"bg-primary text-white text-xs\">\n                              %{career.matchScore}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-text-secondary mb-3\">{career.reasoning}</p>\n                          <div className=\"space-y-2\">\n                            <div>\n                              <span className=\"text-xs font-medium text-text-primary\">Gerekli Beceriler:</span>\n                              <div className=\"flex flex-wrap gap-1 mt-1\">\n                                {career.requiredSkills?.slice(0, 3).map((skill: string, i: number) => (\n                                  <Badge key={i} variant=\"outline\" className=\"text-xs\">{skill}</Badge>\n                                ))}\n                              </div>\n                            </div>\n                            <div>\n                              <span className=\"text-xs font-medium text-text-primary\">Örnek Şirketler:</span>\n                              <p className=\"text-xs text-text-secondary\">\n                                {career.companies?.slice(0, 2).join(\", \")}\n                              </p>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* BTK Recommendations */}\n                <div>\n                  <h3 className=\"text-lg font-semibold text-text-primary mb-4 flex items-center\">\n                    <GraduationCap className=\"mr-2 w-5 h-5\" />İlgini Çekebilecek BTK Kursları\n                  </h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {results.btkRecommendations?.map((course: any, index: number) => (\n                      <Card key={index} className=\"bg-white\">\n                        <CardContent className=\"p-4\">\n                          <h4 className=\"font-semibold text-text-primary mb-2\">{course.title}</h4>\n                          <p className=\"text-sm text-text-secondary mb-3\">{course.description}</p>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Clock className=\"w-4 h-4 text-text-secondary\" />\n                              <span className=\"text-xs text-text-secondary\">{course.duration}</span>\n                            </div>\n                            <Badge variant=\"outline\">{course.level}</Badge>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Student Report Content */}\n                <ReportViewer report={results.studentReport} type=\"student\" />\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"parent\" className=\"space-y-6\">\n            <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-secondary rounded-lg flex items-center justify-center\">\n                    <Users className=\"text-white w-5 h-5\" />\n                  </div>\n                  <span>Veli Destek Kılavuzu</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Child's Interests */}\n                <div>\n                  <h3 className=\"text-lg font-semibold text-text-primary mb-3 flex items-center\">\n                    <Heart className=\"mr-2 w-5 h-5 text-pink-500\" />Çocuğunuzun İlgi Alanları\n                  </h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {results.parentReport?.childInterests?.map((interest: string, index: number) => (\n                      <Badge key={index} variant=\"secondary\" className=\"bg-purple-100 text-purple-800\">\n                        {interest}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* University Recommendations */}\n                <div>\n                  <h3 className=\"text-lg font-semibold text-text-primary mb-3 flex items-center\">\n                    <University className=\"mr-2 w-5 h-5\" />Üniversite Bölüm Önerileri\n                  </h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <Card className=\"bg-white\">\n                      <CardContent className=\"p-4\">\n                        <h4 className=\"font-semibold text-text-primary mb-2\">Mühendislik Alanları</h4>\n                        <ul className=\"text-sm text-text-secondary space-y-1\">\n                          <li>• Çevre Mühendisliği</li>\n                          <li>• Jeoloji Mühendisliği</li>\n                          <li>• Harita Mühendisliği</li>\n                        </ul>\n                      </CardContent>\n                    </Card>\n                    <Card className=\"bg-white\">\n                      <CardContent className=\"p-4\">\n                        <h4 className=\"font-semibold text-text-primary mb-2\">Fen Bilimleri</h4>\n                        <ul className=\"text-sm text-text-secondary space-y-1\">\n                          <li>• Coğrafya</li>\n                          <li>• Meteoroloji</li>\n                          <li>• Jeofizik</li>\n                        </ul>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Support Suggestions */}\n                <div>\n                  <h3 className=\"text-lg font-semibold text-text-primary mb-3 flex items-center\">\n                    <Building className=\"mr-2 w-5 h-5\" />Nasıl Destekleyebilirsiniz\n                  </h3>\n                  <Card className=\"bg-white\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <h4 className=\"font-semibold text-text-primary mb-3\">Pratik Aktiviteler</h4>\n                          <ul className=\"text-sm text-text-secondary space-y-2\">\n                            <li>• Doğa yürüyüşleri ve gözlemler yapın</li>\n                            <li>• Bilim müzelerini ziyaret edin</li>\n                            <li>• Online kursları birlikte takip edin</li>\n                            <li>• Su tasarrufu projeleri geliştirin</li>\n                          </ul>\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold text-text-primary mb-3\">Eğitim Desteği</h4>\n                          <ul className=\"text-sm text-text-secondary space-y-2\">\n                            <li>• STEM kulüplerine katılımı destekleyin</li>\n                            <li>• Bilim yarışmalarına teşvik edin</li>\n                            <li>• Uzmanlarla buluşma fırsatları yaratın</li>\n                            <li>• Kitap ve dergi okuma alışkanlığı kazandırın</li>\n                          </ul>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Parent Report Content */}\n                <ReportViewer report={results.parentReport} type=\"parent\" />\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-center space-x-4 mt-8\">\n          <Button className=\"bg-gradient-to-r from-primary to-secondary text-white px-8 py-3\">\n            <Download className=\"mr-2 w-5 h-5\" />Raporları İndir\n          </Button>\n          <Button variant=\"outline\" className=\"px-8 py-3\">\n            <Share2 className=\"mr-2 w-5 h-5\" />Paylaş\n          </Button>\n          <Link href=\"/\">\n            <Button variant=\"outline\" className=\"px-8 py-3\">\n              <Compass className=\"mr-2 w-5 h-5\" />Yeni Analiz\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17626},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}